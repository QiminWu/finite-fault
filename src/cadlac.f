      INCLUDE 'ARSZCAD.DAT'
C  CADILLAC - FAR-FIELD TELESEISMIC BODY WAVE CODE FOR COMPUTING THE RESPONSE
C  OF FINITE FAULTS LOCATED WITHIN LAYERED SPACES.  THIS CODE IS A MODIFICATION
C  OF DISCONH WHICH WAS MODIFIED BY HEATON FROM THE CODE DISCON WHICH WAS
C  MODIFIED BY CIPAR FROM A CODE WHICH WAS ORIGINALLY WRITTEN BY LANGSTON.
C  THEREFORE ANY COMPLAINTS SHOULD BE DIRECTED TO GOD.
C
C     TQ=RATIO T/Q USED IN FUTTERMAN'S Q OPERATOR
C     NCOMP=1,VERTICAL ;=2, RADIAL; =3,TANGENTIAL.
C     MODE=1,P;=2,SV;=3,SH.
C     SCALE IS IN SEC/MM CONTROLS PLOT SCALE.
C     IPRPL CONTROLS THE PLOTTER TO PLOT EXTRA PLOTS. NORMALLY EQUAL TO 0.
C     IF IPRPL=0, ONLY S*Q*I*RAYS (FINAL ANSWER) IS PLOTTED.
C     IF IPRPL=1, INST, AND S*Q*I*RAYS FOR EACH SOURCE AND
C       FINAL ANSWER ARE PLOTTED.
C     IBUG=1, PLOTS INTERMEDIATE STEPS FOR DEBUGGING PURPOSES.  NORMALLY
C             IBUG=0.
C     DT=TIME POINT SEPARATION.
C     NP=# OF POINTS...NPL=LOG2(NP),USED FOR COOLB
C     REMEMBER THE NUMBER OF REAL PLUS IMAG. POINTS IS 2*NP.
C     FOR LONG-PERIOD BODY WAVES, NP=512, NPL=9, DT=0.2
C     CURRENTLY (DEC. 20, 1989) THE ARRAYS ARE SET UP FOR NP=4096.
C     XIN CONTAINS THE INSTRUMENT IN THE TIME DOMAIN.
C     FQW CONTAINS THE Q-OPERATOR IN THE FREQUENCY DOMAIN.
C     AMPLITUDE SCALING OF DISCONH HAS BEEN CHECKED AND CORRECTED
C          ON FEBRUARY 27, 1980.
C     SCALING IS IN UNITS OF MICRONS, ZERO-TO-PEAK, FOR AN INSTRUMENT
C          OF UNIT MAGNIFICATION.
C
C
C                INTERACTIVE INPUT
C
C
C     ISAVEH=1, WRITES DISPLACEMENTS FOR EACH FAULT SEGMENT (NSORCE
C               OF THEM) TO DISK FILE DISPL.
C           =0, DISPLACEMENTS NOT SAVED.
C     INSTRH=1, LONG PERIOD WWSSN INSTRUMENT RESPONSE IS USED. READ
C               FROM FILE INSTRYLONG.
C           =2, SHORT PERIOD WWSSN INSTRUMENT RESPONSE IS USED. READ
C               FROM FILE INSTRYSHORT.
C     ITIMEH=1, PROGRAM COMPUTES AND PLOTS ONLY THE SMOOTHED FAR
C               FIELD TIME FUNCTIONS. ALL OTHER INPUT IS THE SAME.
C           =0, NORMAL OPERATION MODE OF THE PROGRAM.
C     TQ= VALUE OF T*
C     NCOMP=1, VERTICAL
C          =2, RADIAL
C          =3, TRANSVERSE
C     MODE=1, P-WAVE
C         =2, SV-WAVE
C         =3, SH-WAVE.
C     NSORCE= NUMBER OF DIFFERENT FAULTS TO BE CONSIDERED.
C              MAXIMUM IS MSOR. NSORCE=0 TERMINATES THE
C             PROGRAM.
C     EPI= EVENT ID.
C     MODL= MODEL ID.
C     STRIKE, DIP, RAKE= STRIKE, DIP, AND RAKE OF EACH FAULT.
C     MOMENT= MOMENT OF EACH SOURCE (X10**26 DYNE-CM)
C     TLAG= TIME DELAY OF EACH SOURCE.
C     XC= NORTH COMPONENT OF RELATIVE LOCATION OF TOP CENTER OF FAULT.
C     YC= EAST COMPONENT OF RELATIVE LOCATION OF TOP CENTER OF FAULT.
C     DT1, DT2, DT3= RISE, TOP, AND FALL OF TRAPEZOID DESCRIBING
C                    SOURCE RUPTURE CHARACTER AT A GIVEN POINT ON
C                    EACH FAULT.
C     NSORCE SETS OF THE FOLLOWING INPUT DATA.
C     NUMBER OF WEIGHTS ALONG STRIKE FOR A GIVEN FAULT SEGMENT.
C     NUMBER OF WEIGHTS DOWN DIP FOR A GIVEN FAULT SEGMENT.
C     NUMBER OF POINT SOURCES TO INTERPOLATE TO BETWEEN EACH INPUT
C          WEIGHT ALONG THE STRIKE OF THE FAULT.
C     NUMBER OF POINT SOURCES TO INTERPOLATE TO BETWEEN EACH INPUT
C          WEIGHT DOWN THE DIP OF THE FAULT.
C          HORIZONTAL NUMBERING OF POINT SOURCES INCREASES IN THE
C          DIRECTION OF THE STRIKE OF THE FAULT. VERTICAL NUMBERING
C          OF POINT SOURCES INCREASES DOWN DIP. FOR A FAULT SEGMENT
C          ABOVE THE HYPOCENTER, THE VERTICAL NUMBER
C          IS THE TOTAL NUMBER OF SOURCES VERTICALLY DOWN THE FAULT
C          SEGMENT IN QUESTION PLUS THE NUMBER TO REACH THE FIRST
C          POINT OF THE FAULT SEGMENT TO RUPTURE FROM THE HYPOCENTER.
C          THE ORIGIN OF COORDINATES FOR NUMBERING IS ALWAYS IN
C          THE UPPER LEFT HAND CORNER OF EACH FAULT SEGMENT. IF THE
C          HYPOCENTER IS ABOVE THE UPPER LEFT HAND CORNER OF THE
C          FAULT, THE VERTICAL INDEX IS NEGATIVE. HORIZONTAL INDEX
C          IS ALWAYS POSITIVE.
C     RUPTURE VELOCITY
C     ZERO TERMINATES PROGRAM.
C
C
C
C
C       THIS VERSION OF THE PROGRAM AUTOMATICALLY HANDLES FINITE FAULTS
C       WHICH EXTEND BETWEEN SEVERAL LAYERS.  THE FINITENESS AND THE
C       LAYERING ARE HANDLED IN A WAY WHICH IS TRANSPARENT TO THE USER.
C       THIS VERSION WAS DEVELOPED IN FEBRUARY 1982 BY HEATON.
C
C
C       THE WEIGHT FILE IS INPUTTED IN TERMS OF RELATIVE AMPLITUDE OF
C       SLIP AS A FUNCTION OF LOCATION ON THE FAULT.  THIS WEIGHTING
C       IS THEN TURNED INTO ABSOLUTE SLIP WHICH IS DETERMINED BY THE
C       INPUT MOMENT AND THE FAULT DIMENSIONS.  CONTOUR MAPS CAN BE
C       MADE OF THE ABSOLUTE SLIP FILE BY USING MINSTER'S CONTOUR PROGRAM
C       ON THE FILES CONTOUR01, CONTOUR02, ETC.  THE SLIP VALUES ARE GIVEN
C       IN CENTIMETERS.
C
C
C       IN THIS VERSION, THE RAYS ARE NOT READ FROM THE INSTRY FILE.
C       THE RAYS ARE READ FROM RAYUFD WHICH SHOULD BE A SUBUFD OF
C       THE UFD WHICH IS RUNNING THIS PROGRAM.  THE RAYS ARE CONTAINED
C       IN FILES WHICH ARE NAMED, RAY.M.N.L, WHERE M=MODE, N=NUMBER OF
C       LAYERS IN THE SOURCE REGION, AND L=THE LAYER WITH THE SOURCE.
      COMMON/BUG/IBUG
      COMMON/IPR/IPRNT
      COMMON/PAPER/IPAP
      COMMON/COMPLO/ITEST,XLNG,YLNG,IERROR
      COMMON/FAUL1/DIP(MSOR),RAKE(MSOR),STRK(MSOR),FMNT(MSOR),
     + TLAG(MSOR),XC(MSOR),YC(MSOR),HS(MSOR),LIS(MSOR)
c     COMMON/PLOTD/IFIRST,EPI,MODL,XNAME,YNAME,XAMP,YAMP,XSPACE
c    2 ,YSPACE
      COMMON/FLOOSE/XSS(MSOR,8192)
      COMMON/RINV/RI(16),DIS(16)
      COMMON/SCONV/PP(4096),NCOMP,MODE
      COMMON/STAT/DEL(NSTN),AZ(NSTN),P(NSTN),CRE(NSTN),SRE(NSTN)
      COMMON/STIM/XS(4,4096)
      COMMON/STUFF/C(MLAY),S(MLAY),D(MLAY),TH(MLAY),RCSQ(MLAY),
     +RSSQ(MLAY),DPTH(MLAY)
      COMMON/TRAVEL/LP(MLAY),LS(MLAY),JO
      COMMON/RAT/FAR(MTX,MTY,4),WEIGHT(MTX,MTY,MSOR),TMLAG(MTX,MTY)
      COMMON/TAIL/NX(MSOR),NY(MSOR),NDX(MSOR),NDY(MSOR),IH(MSOR),
     +JH(MSOR),RV(MSOR),DSX(MSOR),DSY(MSOR),DTD(MSOR)
      COMMON/SUBF/NSUB(MSOR),IBX1(MSUB,MSOR),IEX1(MSUB,MSOR),
     +BY1(MSUB,MSOR),EY1(MSUB,MSOR),JBY1(MSUB,2,MSOR),
     +JEY1(MSUB,2,MSOR),MSUB1(MSOR),IB(MSUB,MSOR),IE(MSUB,MSOR)
      COMMON/POINT/ICON
      COMMON/JUNK/NGDRX,NGDRY,XMIN,XMAX,YMIN,YMAX,ZMIN,ZMAX,CLAT,CLON
      COMMON/TIMEFN/TF(4096,4),XZK(4096)
      COMMON/BIN/MPOIN,DELTM,TZERO
      COMMON/BIG/X1(8192),XS1(8192),XS2(MSOR,4096),X(4096),XS3(4096)
      DIMENSION XIN(8192),FQW(8200),XS4(4096)
      DIMENSION DT1(MSOR),DT2(MSOR),DT3(MSOR)
      DIMENSION HYPD(MSOR),FL(MSOR),XHYP(MSOR)
      REAL MOMENT
      REAL*8 RCSQ,RSSQ,C,S,D,TH
      INTEGER*4 XINM(20), ID(NSTN),EPI,MODL,INST(4),LWRT
      INTEGER*2 FRMT(10)
      CHARACTER*80 IFG1,TYPE
      DATA     RI/8.4E-05,7.95E-05,7.65E-05,7.4E-05,7.15E-05,6.9E-05,
     2 6.7E-05,6.35E-05,5.95E-05,5.6E-05,5.3E-05,5.0E-05,4.7E-05,
     3 4.4E-05,4.1E-05,3.85E-05/
      DATA     DIS/30.,32.5,35.,37.5,40.,42.5,45.,50.,55.,60.,65.,70.,
     2 75.,80.,85.,90./
      DATA INST/4HINST,4H S*Q,4H SQI,4H   Q/
      MOMENT = 1.0E+26
C     L IS PLOTTER CONTROL.
      L=1
      IPAP=0
      EPI=INST(1)
      MODL=INST(1)
C     OPEN UNIT 3 FOR WRITING TO FILE 'OUTPUT'.
      OPEN(UNIT=3,FILE='CADOUT.DAT',STATUS='NEW')
C     OPEN UNIT 8 FOR PLOT FILE 'PLOT'.
c     OPEN(UNIT=8,FILE='PLOT.DAT',STATUS='NEW',CARRIAGECONTROL='LIST')
c     CALL PLOTS(53,0,8)
c     CALL SPEED(20)
      ICON=0
      XNAME=0.
      YNAME=0.
      XAMP=0.
      YAMP=0.
      XSPACE=0.
      LWRT=0
      TZERO=0.
C
      WRITE(6,600)
      WRITE(3,600)
  600 FORMAT(1X,50HCADILLAC - TELESEISMIC DISLOCATION SOURCE PROGRAM   )
      WRITE(3,111)
      WRITE(6,690)
  690 FORMAT(3X,47HISAVEH, =1, SAVE DISPL., =0, DON'T SAVE DISPL.     )
      WRITE(6,691)
  691 FORMAT(3X,34HINSTRH, =1, LP RESP., =2, SP RESP.  )
      WRITE(6,692)
  692 FORMAT(3X,52HITIMEH, =1, COMPUTE TIME FUNC. ONLY, =0, NORM. OPER.)
      WRITE(6,526)
 526  FORMAT(3X,'IGDSN=1,  INSTRUMENT ADDED BY SEISRESP2. CADILLAC',/,
     +1X,'            INSTRUMENT RESPONSE VALUES NOT USED',/,
     +1X,'       =0,  INSTRUMENT RESPONSE TAKEN FROM CADILLAC',/,
     +1X,'            INSTRUMENT FILE.')
      WRITE(6,528)
 528  FORMAT(3X,'ITFEX=1,  AN EXTERNAL TIME FUNCTION IS READ IN TO',/,
     +1X,'            REPLACE THE TIME FUNCTIONS CALCULATED BY DIANE',/,
     +1X,'       =0,  NORMAL OPERATION OF PROGRAM')
      WRITE(3,690)
      WRITE(3,691)
      WRITE(3,692)
      WRITE(3,526)
      WRITE(3,528)
      WRITE(6,6931)
 6931 FORMAT(1X,'GIVE VALUES OF ISAVEH, INSTRH, ITIMEH, IGDSN, ITFEX')
      READ(5,*) ISAVEH,INSTRH,ITIMEH,IGDSN,ITFEX
      WRITE(3,693) ISAVEH,INSTRH,ITIMEH,IGDSN,ITFEX
  693 FORMAT(3X,'ISAVEH= ',I2,'  INSTRH= ',I2,' ITIMEH= ',I2,
     +'  IGDSN= ',I2,'  ITFEX= ',I2)   
      WRITE(6,4009)
 4009 FORMAT(1X,'DO YOU WANT BINARY OUTPUT FILE (1 OR 0)')
      READ (5,*) KBIN
      OPEN(UNIT=13,FILE='CADARR.DAT',STATUS='UNKNOWN')
      IF(KBIN.EQ.1) OPEN(UNIT=12,FILE='CADBIN.DAT',STATUS='NEW',
     + ACCESS='SEQUENTIAL',FORM='UNFORMATTED')
      IF(INSTRH .EQ. 1) OPEN(UNIT=2,FILE='INLONG.DAT',STATUS='OLD')
      IF(INSTRH .EQ. 2) OPEN(UNIT=2,FILE='INSHORT.DAT',STATUS='OLD')
      IF(ISAVEH .EQ. 1) OPEN(UNIT=7,FILE='DISPL.DAT',STATUS='NEW')
      READ(2,102) DT,NP,NPL,SCALE,RINC,IPRPL,IBUG,IPRNT
  102 FORMAT( F5.0,2I5,2F10.0,3I5 )
      WRITE(3,103) DT, NP, SCALE, RINC, NPL,IPRPL,IBUG
  110 FORMAT(1X,10E10.3)
      WRITE(6,103) DT, NP, SCALE, RINC,NPL,IPRPL,IBUG
  103 FORMAT(3X,'DT =',F10.3,4X,'NP =',I5,3X,6HSCALE=  F10.3,
     2  7H  RINC=  F10.5,6H  NPL=I3,8H  IPRPL=3I3 )
C     X IS THE EQUAL INTERVAL ABSCISSA FOR GIVEN DT.
      IF(INSTRH .EQ. 2) DT=.01
      NP2=NP*2
      DO 5 I=1,NP
    5 X(I)=DT*(I-1)
C
C        READING IN INSTRUMENT
C
      IF(IGDSN .EQ. 1) GO TO 525
      READ(2,100) (XINM(I),I=1,12), FRMT,DTI, NPI
  100 FORMAT(12A4,2X,10A2,F5.0,I5)
      WRITE(3,101) (XINM(I),I=1,12),FRMT,DTI, NPI
      WRITE(6,101) (XINM(I),I=1,12),FRMT,DTI, NPI
  101 FORMAT( 3X,12A4,2X,10A2, 6H  DTI= F7.3, 6H  NPI= I4 )
      WRITE(6,773)
 773  FORMAT(' NOW READ INSTRUMENT RESPONSE ')
      READ(2,FRMT)(XIN(I),I=1,NPI)
      WRITE(3,110) (XIN(I),I=1,200)
      IF(ITIMEH .EQ. 1) GO TO 133
C
C        INTERPOLATING INSTRUMENT IF NEEDED
C        NOTE...TIME STEP FOR WWSSN LONG PERIOD INSTRUMENT IS 0.1 SEC,
C        TIME STEP FOR WWSSN SHORT PERIOD INSTRUMENT IS 0.01 SEC, BEST
C        NOT TO USE A TIME STEP FOR THE SYNTHETICS MUCH LARGER THAN
C        THESE VALUES.
C  
      T1=1.0E-05
      DDT=ABS(DT-DTI)
      IF(DDT.LE.T1) GO TO 11
      DO 12 I=1,NPI
   12 X1(I)=DTI*(I-1)
      CALL INTERP(NPI,X1,XIN,NP,X,XS1,NPNEW)
      NPI=NPNEW
      DO 13 I=1,NPI
   13 XIN(I)=XS1(I)
   11 CONTINUE
      IF (NPI .GE. NP) GO TO 25
      NPI1=NPI+1
      DO 17 I=NPI1,NP
   17 XIN(I)=XIN(NPI)
      NPI=NP
  25  CONTINUE
c     IF(IPRPL .EQ. +1) CALL SEPLOT(L,NPI,X,XIN,SCALE,INST(1))
C     TRANSFORM INSTRUMENT TO FREQUENCY DOMAIN.
      NP2=NP*2
      DO 18 I=1,NP2
   18 XS1(I)=0.0
      DO 19 I=1,NP
   19 XS1(2*I-1)=XIN(I)
      CALL COOLB(NPL,XS1,-1.0)
C     SCALE FREQUENCY DOMAIN INSTRUMENT RESPONSE.
      DO 23 I=1,NP2
   23 XIN(I)=XS1(I)*DT
  525 CONTINUE
      WRITE(3,111)
C     CORRECT GEOMETRICAL SPREADING FACTOR FOR SOURCE DEPTH
      DO 14 I=1,16
   14 RI(I) = RINC*RI(I)
      WRITE(3,620)
  620 FORMAT(2X,29HGEOMETRICAL SPREADING FACTOR    )
      WRITE(3,105) (DIS(I),I=1,16)
  105 FORMAT( 16(1X,F6.2) )
      WRITE(3,110) (RI(I),I=1,16)
  133 CONTINUE
C
C        READING IN STATION INFORMATION
C
      READ(2,255) NSTAT
      WRITE(3,109) NSTAT
      WRITE(6,109) NSTAT
      IF (KBIN.EQ.1) WRITE(12) NSTAT
  109 FORMAT(1X,I5,1X,'STATIONS')
      WRITE(3,200)
      WRITE(6,200)
  200 FORMAT(1X,2X,'ID',11X,'DEL',7X,'AZ',7X,'P',8X,'CRE',6X,'SRE')
      DO 15 I=1,NSTAT
      READ(2,107) ID(I),DEL(I),AZ(I),P(I),CRE(I),SRE(I)
  107 FORMAT(A4,6X,5F10.0)
      IF (P(I) .GT. 1.0) P(I)=P(I)/111.19
      WRITE(3,108) ID(I),DEL(I),AZ(I),P(I),CRE(I),SRE(I)
      WRITE(6,108) ID(I),DEL(I),AZ(I),P(I),CRE(I),SRE(I)
  108 FORMAT(1X,A4,6X,5F10.3)
   15 CONTINUE
C
C     READ IN EARTH STRUCTURE
C
      READ(2,255) JO
  255 FORMAT(I10)
      DO 31 I=1,JO
   31 READ(2,256) C(I),S(I),D(I),TH(I)
  256 FORMAT(4F10.0)
      WRITE(3,111)
  111 FORMAT(1X,//)
      WRITE(3,257)
      WRITE(6,257)
  257 FORMAT(1X,5X,'LAYERED EARTH MODEL'//)
      WRITE(3,258)
      WRITE(6,258)
  258 FORMAT(1X,5X,'C',13X,'S',13X,'D',13X,'TH')
      DO 34 I=1,JO
      WRITE(6,259) C(I),S(I),D(I),TH(I)
   34 WRITE(3,259) C(I),S(I),D(I),TH(I)
  259 FORMAT(1X,4(F10.3,4X))
C
C        Q OPERATOR
C
      WRITE(6,529)
 529  FORMAT(1X,'ENTER 0...IF YOU WANT A CONSTANT T STAR MODEL',/,
     +1X,'ENTER 1...IF YOU WANT MINSTER ATTENUATION OPERATOR',/,
     +1X,'ENTER 2...IF YOU WANT CHOYS VARIABLE T STAR MODEL')
      READ(5,*) IATTEN
      IF(IATTEN .EQ. 0) THEN
      WRITE(6,530)
 530  FORMAT(1X,'ENTER THE VALUE OF T STAR (T/Q)')
      READ(5,*) TQ
      END IF
      IF(IATTEN .EQ. 1) THEN
      WRITE(6,531)
 531  FORMAT(1X,'ENTER VALUES OF T STAR, TAUBM, TAULM, TRAVEL TIME.',/,
     +1X,'ENTER ZERO FOR DEFAULT VALUES OF 1.0, 1000., .01, AND 600.')
      READ(5,*) TQ,TAUBM,TAULM,TAU
      IF(TQ .EQ. 0.) TQ=1.0
      IF(TAUBM .EQ. 0.) TAUBM=1000.
      IF(TAULM .EQ. 0.) TAULM=.01
      IF(TAU .EQ. 0.) TAU=600.
      ENDIF
C
C     READ IN CHOY ATTENUATION OPERATOR, INTERPOLATE TO THE SAME TIME
C     STEP AS THE SYNTHETICS, AND TRANSFORM INTO THE FREQUENCY DOMAIN.
C     NOTE...TIME STEP OF CHOY OPERATOR IS 0.1 SEC, BEST TO NOT USE A
C     TIME STEP IN THE SYNTHETICS MUCH LARGER THAN THIS.
C
      IF(IATTEN .EQ. 2) THEN
      WRITE(6,532)
  532 FORMAT(1X,'ENTER 1 FOR LOW ATTENUATION CHOY MODEL',/,
     +1X,'ENTER 2 FOR HIGH ATTENUATION CHOY MODEL')
      READ(5,*) ICHOY
      IF(ICHOY .EQ. 1) OPEN(UNIT=14,FILE='CHOYLO.DAT',
     +STATUS='OLD')
      IF(ICHOY .EQ. 2) OPEN(UNIT=14,FILE='CHOYHI.DAT',
     +STATUS='OLD')
      READ(14,300) TYPE
      WRITE(3,300) TYPE
      READ(14,301) NCH,DTCH
      READ(14,302) PAMP
      READ(14,302) (XS4(I),I=1,NCH)
      CLOSE(14)
  300 FORMAT(A)
  301 FORMAT(I5,F5.0)
  302 FORMAT(5E15.7)
      DIFDT=ABS(DTCH-DT)
      IF(DIFDT .LT. .0001) GO TO 310
      DO 307 I=1,NP
  307 X(I)=DT*(I-1)
      DO 303 I=1,NCH
  303 XS3(I)=DTCH*(I-1)
      CALL INTERP(NCH,XS3,XS4,NP,X,X1,NPNEW)
      NCH=NPNEW
      GO TO 314
  310 DO 312 I=1,NCH
  312 X1(I)=XS4(I)
  314 IF(NCH .GE. NP) GO TO 311
      NCH1=NCH+1
      DO 313 I=NCH1,NP
  313 X1(I)=X1(NCH)
  311 CALL TRAP(X1,X,1,NCH,XS4,NQ)
      QAREA=XS4(NQ)
      DO 739 I=1,NP
  739 X1(I)=X1(I)/QAREA
      WRITE(3,740) QAREA
  740 FORMAT(1X,'AREA UNDER Q OPERATOR= ',F12.4)
      DO 304 I=1,NP
      FQW(2*I)=0.
  304 FQW(2*I-1)=X1(I)
      CALL COOLB(NPL,FQW,-1.0)
      DO 306 I=1,NP2
  306 FQW(I)=FQW(I)*DT
c     IF(IPRPL .EQ. 1) CALL SEPLOT(L,NP,X,X1,SCALE,INST(4))
      DO 308 I=1,NCH
      XS3(I)=0.
  308 XS4(I)=0.
      DO 309 I=1,NP
  309 X1(I)=0.
      GO TO 134
      END IF
C
C                
      IF(ITIMEH .EQ. 1) GO TO 134
      WRITE(3,111)
      CALL FTTQ(NPL,DT,TQ,FQW,IATTEN,TAUBM,TAULM,TAU)
C     FQW IS FREQUENCY DOMAIN Q-OPERATOR.
  134 CONTINUE
      WRITE(3,614)
      WRITE(6,614)
  614 FORMAT(2X,48HNCOMP  =1, VERTICAL, =2, RADIAL, =3, TRANSVERSE    )
      WRITE(3,615)
      WRITE(6,615)
  615 FORMAT(2X,43HMODE  =1, P-WAVE, =2, SV-WAVE, =3, SH-WAVE  )
      WRITE(6,601)
  601 FORMAT(1X, 10HNCOMP,MODE          )
      READ(5,*) NCOMP,MODE
      WRITE(3,602) TQ, NCOMP, MODE
  602 FORMAT(5X, 5HT/Q=  F10.4, 9H  NCOMP= I3, 8H  MODE=  I3  )
      IF(ITIMEH .EQ. 1) GO TO 135
C
C     CONVOLVE Q-OPERATOR WITH INSTRUMENT
C
      IF(IGDSN .EQ. 1) GO TO 527
      DO 37 I=1,NP
      XR=FQW(2*I-1)
      XI=FQW(2*I)
      YR=XIN(2*I-1)
      YI=XIN(2*I)
      CONR=(XR*YR-XI*YI)
      CONI=(XI*YR+XR*YI)
      FQW(2*I-1)=CONR
      FQW(2*I)=CONI
  37  CONTINUE
 527  CONTINUE 
C     FQW IS NOW I*Q IN THE FREQUENCY DOMAIN.
C     INTERPOLATE FQW TO DT=0.02 SEC, FOR SHORT-PERIOD RECORDS ONLY.
      IF(INSTRH .EQ. 1) GO TO 444
C     10/10/85 ERROR IN FFT NORMALIZATION CORRECTED FOR SHORT-PERIOD
C     SYNTHETICS.  BEFORE THIS DATE SYNTHETICS WERE TOO SMALL BY A
C     FACTOR OF 2.
      DTSAVE=DT  
      DT=.02
      DO 445 I=1,NP
 445  X(I)=DT*(I-1)
      CALL COOLB(NPL,FQW,1.)
      J=1
      Q=FLOAT(NP)
      DO 446 I=1,NP,4
      FQW(J)=FQW(I)/(Q*DTSAVE)
      FQW(J+1)=0.
 446  J=J+2
      DO 447 I=J,NP2
 447  FQW(I)=0.
      CALL COOLB(NPL,FQW,-1.)
      DO 657 I=1,NP2
 657  FQW(I)=FQW(I)*DT
 444  CONTINUE
C     FQW IS I*Q IN FREQUENCY DOMAIN.
 135  CONTINUE
C
C        READING IN FAULT-PLANE PARAMETERS
C        READING IN SOURCE TIME FUNCTIONS
C
   77 WRITE(6,603)
      OPEN(UNIT=9,FILE='WEIGHT.DAT',STATUS='OLD')
  603 FORMAT(1X,17HHOW MANY SOURCES?   )
      WRITE(6,6031)
 6031 FORMAT(1X,'NSORCE=')
      READ (5,*) NSORCE
      IF ( NSORCE .EQ. 0 )  GO TO 76
      WRITE(6,513)
  513 FORMAT(1X,  9HEVNT MODL    )
      READ(5,514)  MODL,EPI
  514 FORMAT( A4, 1X, A4 )
      WRITE(6,5141)
 5141 FORMAT(1X,'CHANGE FAULT PARAMETERS?')
      READ(5,*) ICIP
      IF ( ICIP .EQ. 0 )  GO TO 501
      DO 502 I=1,NSORCE
      WRITE(6,604)
  604 FORMAT(1X,24HSTRIKE    DIP       RAKE  )
      WRITE(6,6041)
 6041 FORMAT(1X,'THE DIP CANT BE NEGATIVE, BUT MAY BE GREATER THAN 90.')
      WRITE(6,6042)
 6042 FORMAT(1X,'IF DIP>90, THEN RAKE=+90 IS STILL THRUST FAULT.')
  502 READ(5,*) STRK(I),DIP(I),RAKE(I)
  501 WRITE(6,5011)
 5011 FORMAT(1X,'CHANGE MOMENT?')
      READ (5,*) ICIP
      IF ( ICIP .EQ. 0) GO TO 505
      DO 506 I=1,NSORCE
      WRITE(6,605)
  605 FORMAT(1X,'  MOMENT (*E+26)')
      READ(5,*) FMNT(I)
  506 FMNT(I) = FMNT(I) * MOMENT
  505 WRITE(6,5051)
 5051 FORMAT(1X,'CHANGE TLAG, XC, YC?')
      READ (5,*) ICIP
      IF (ICIP .EQ. 0) GO TO 508
      DO 509 I=1,NSORCE
      WRITE(6,606)
  606 FORMAT(1X, 22HTLAG      XC        YC  )
  509 READ(5,*) TLAG(I),XC(I),YC(I)
  508 WRITE(6,5081)
 5081 FORMAT(1X,'CHANGE TIME FUNCTION?')
      READ(5,*) ICIP
      IF (ICIP .EQ. 0) GO TO 510
	write(6,700)
700	format(1x,' Enter 1 for TRAPEZOID, 2 for DIGITIZED TIME FUNCTION')
	read (5,*) ITMTY
	if (ITMTY .eq. 2) go to 701
      DO 511 I=1,NSORCE
      WRITE(6,609)
  609 FORMAT(1X, 13HDT1  DT2  DT3  )
  511 READ(5,*)DT1(I),DT2(I),DT3(I)
	go to 702
701 	call contf(xss,xs4,xs3,x,fqw,x1,xs1,np,np2,npl,dt,area,nsorce,
     +	ibug,scale)
702	continue
  510 WRITE(6,515) EPI, MODL
  515 FORMAT( 4X, 7HEVENT= A4, 9H  MODEL=  A4 )
      WRITE(6,607)
  607 FORMAT(1X,'SOURCE  STRIKE   DIP    RAKE     MOMENT   TLAG    ',
     +'XC     YC    DT1    DT2    DT3')
      WRITE(6,608) (I, STRK(I), DIP(I), RAKE(I), FMNT(I),
     2  TLAG(I), XC(I), YC(I), DT1(I), DT2(I), DT3(I), I=1,NSORCE)
  608 FORMAT( 5X, I2,2X,3F7.2,E12.5,6F6.2 )
      WRITE(6,5211)
 5211 FORMAT(1X,'ARE YOU READY?')
      READ(5,*) ICIP
      IF (ICIP .EQ. 0) GO TO 77
      WRITE(3,111)
      WRITE(3,515) EPI, MODL
  522 WRITE(3,607)
      WRITE(3,608) (I,STRK(I),DIP(I),RAKE(I),FMNT(I),
     2  TLAG(I),XC(I),YC(I),DT1(I),DT2(I),DT3(I),I=1,NSORCE)
      WRITE(3,111)
 9000 FORMAT(1X,10E12.4)
      IF(ITIMEH .EQ. 1) GO TO 136
C
C        CONVOLVING SOURCE*Q FOR EACH SOURCE
C
	if (ITMTY .eq. 2) go to 730
      DO 30 I=1,NSORCE
      DO 30 J=1,NP
   30 XSS(I,J)=0.0
      DO 22 I=1,NSORCE
C        MODIFIED BOXCAR SOURCE TIME FUNCTION
      D1=DT1(I)
      D2=DT2(I)
      D3=DT3(I)
      CALL SCON(XS1,DT,NP,NPL,D1,D2,D3)
C        CONVOLVING
      DO 32 J=1,NP
      XR=XS1(2*J-1)
      XI=XS1(2*J)
      YR=FQW(2*J-1)
      YI=FQW(2*J)
      CONR=(XR*YR-XI*YI)
      CONI=(XI*YR+XR*YI)
      XS1(2*J-1)=CONR
      XS1(2*J)=CONI
      XSS(I,2*J-1)=CONR
      XSS(I,2*J)=CONI
   32 CONTINUE
      IF(IBUG .EQ. 0) GO TO 22
      CALL COOLB(NPL,XS1,+1.0)
      XS1(1)=XS1(1)/(DT*NP)
      DO 33 J=2,NP
  33  XS1(J)=XS1(2*J-1)/(DT*NP)
C     XSS(I,J) IS Q*I CONVOLVED WITH SOURCE FOR SOURCE I.
c         CALL SEPLOT(L,NP,X,XS1,SCALE,INST(3))
   22 CONTINUE
  730 WRITE(6,611)
  611 FORMAT(1X, 8HTHINKING   )
  136 CONTINUE
C     RESET PLOTTING CONTROL PARAMETER, L, FOR NEW MODEL.
      L=1
C
C        COMPUTING THE TOTAL RESPONSE AT EACH STATION
C
      DO 20 J=1,NSTAT
      TFIRST=100.
      PC=P(J)
      WRITE(3,616) J, ID(J), PC
      WRITE(6,616) J, ID(J), PC
  616 FORMAT( 3X, 7HSTATION I3,1X,A4, 4H  P= F7.4)
      DO 21 I=1,NSORCE
      IF (J.GT.1) GO TO 5375
      DDIP=DIP(I)*3.14159/180.
C
C   READ IN FINITE FAULT PARAMETERS AND MASSAGE WEIGHT FILES.
C
      CALL JILL (I,DDIP,HYPD(I),FL(I),XHYP(I),JO)
C   SET UP SUBFAULT PARAMETERS SO THAT FINITE FAULT IS DIVIDED INTO MANY
C   SUBFAULTS.  TWO TYPES OF SUBFAULT BOUNDARIES ARE SET UP.  REGULAR
C   SUBFAULT BOUNDARIES WHICH WERE SPECIFIED IN JILL HAVE TOP AND BOTTOM
C   INDICES WHICH ARE GIVEN BY JBY1(NS,1,I) AND JEY1(NS,1,I) AND WHERE
C   JBY1(NS,2,I) IS POSITVE.  ANY VELOCITY DISCONTINUITIES ALSO FORM
C   SUBFAULT BOUNDARIES.  THESE BOUNDARIES ARE NEEDED FOR THE CALCULATION
C   AND ARE LATER REMOVED.  THEY ARE TREATED IN THE SAME FASHION AS NORMAL
C   SUBFAULT BOUNDARIES EXCEPT THAT JBY1(NS,2,I) IS NEGATIVE.
      CALL SUBFLT(I,DDIP)
 5375 CONTINUE
      WRITE(6,4761) STRK(I),DIP(I),AZ(J)
 4761 FORMAT (1X,'STRK,DIP,AZ',3F12.6)
      SSTRK = STRK(I)*3.14159/180.
      DDIP = DIP(I)*3.14159/180.
      AAZ = AZ(J)*3.14159/180.
      DO 3001 M=1,NP
      XS3(M)=0.
 3001 XS2(I,M)=0.
C        CYCLE THROUGH THE SUBFAULTS
      NSU=MSUB1(I)
      LIST=IABS(JBY1(1,2,I))
      DO 3000 NS=1,NSU
      LIS(I)=IABS(JBY1(NS,2,I))
C        LIS IS THE LAYER WITH THE SOURCE.
      LOS=LIS(I)
      IF((LIS(I).EQ.LIST).AND.(NS.NE.1)) GO TO 3002
C
C    WILL NOW DETERMINE THE GEOMETRY OF SUBFAULTS WITH RESPECT TO THE
C    HYPOCENTER.  THESE NUMBERS GO INTO THE SUBROUTINE TTLAG.  THIS
C    STEP REMOVES THE CALCULATION OF STTM WHICH USED TO BE DONE IN DIANE.
C
      CALL SLAVE(I,HYPD(I),SDP,LOS,SSTRK,DDIP,SN,SE,FL(I),XHYP(I))
      VPX=C(LOS)
      VSX=S(LOS)
C
C     WILL NOW CALCULATE POINT SOURCE RESPONSES
C     SDP REPRESENTS THE SOURCE DEPTH.
C
      CALL DISWHT(J,I,MODE,PC,LOS,SDP)
 3002 CONTINUE
      LIST=LIS(I)
 7301 FORMAT(1X,'SUBFAULT NUMBER ',I3,' IN LAYER NUMBER ',I2,
     +'WITH A SOURCE DEPTH OF ',F10.5)
C
C     WILL NOW CALCUALTE FAR-FIELD TIME FUNCTIONS FOR EACH FINITE SUBFAULT.
C
      CALL DIANE (DT,SSTRK,DDIP,AAZ,PC,I,VPX,VSX,NS,LOS,HYPD(I))
      IF(ITFEX .NE. 1) GO TO 978
      WRITE(6,984)
  984 FORMAT(1X,'ENTER FILE NAME WITH EXTERNAL TIME FUNCTION')
      READ(5,985) IFG1
  985 FORMAT(A)
      OPEN(UNIT=15,FILE=IFG1,STATUS='OLD')
      READ(15,979) NEX,DTEX
      READ(15,980) (XZK(K),K=1,NP)
      CLOSE(15)
  983 FORMAT(1X,'DTEX= ',F10.5,' DT= ',F10.5,' STOP ')
  979 FORMAT(I10,F10.5)
  980 FORMAT(8F10.0)
      IF(DTEX .NE. DT) WRITE(6,983) DTEX,DT
      IF(DTEX .NE. DT) STOP
      DO 981 M=1,4
      DO 982 K=1,NP
  982 TF(K,M)=XZK(K)
  981 CONTINUE
  978 DO 1418 M=1,4
      DO 1417 K=1,NP
 1417 XZK(K) = TF(K,M)
      IF(ITIMEH .EQ. 0) GO TO 137
      CALL FILTER(XZK,XS1,3,NP)
      DO 139 KJ=1,NP
 139  XZK(KJ)=XS1(KJ)
c     CALL SEPLOT(L,NP,X,XZK,SCALE,ID(J))
 137  CONTINUE
c     IF(IBUG .EQ. 1) CALL SEPLOT(L,NP,X,XZK,SCALE,ID(J))
 1418 CONTINUE
      IF(ITIMEH .EQ. 1) GO TO 3000
C       CONVOLVE EACH RAY WITH S*Q*I.
      DO 28 M=1,4
C       M =1, DOWN-GOING P, =2, UP-GOING P, =3, DOWN-GOING S, =4, UP-GOING S.
      DO 27 K=1,NP
      IJK=K*2-1
      XS1(IJK+1)=0.
   27 XS1(IJK) = TF(K,M)*DT
      IF (IBUG .EQ. 1) WRITE(3,9000) (XS1(IJK),IJK=1,NP)
      CALL COOLB(NPL,XS1,-1.)
C       CONVOLVE PROPAGATION WITH I*Q.
      DO 38 N=1,NP
      XR=XS1(2*N-1)
      XI=XS1(2*N)
      YR=XSS(I,2*N-1)
      YI=XSS(I,2*N)
      CONR=(XR*YR-XI*YI)
      CONI=(XI*YR+XR*YI)
      XS1(2*N-1)=CONR
      XS1(2*N)=CONI
   38 CONTINUE
      CALL COOLB(NPL,XS1,+1.0)
C       XS1 IS NOW THE TIME DOMAIN S*I*Q FOR A PARTICULAR RAY, SOURCE & STATION.
      DO 10 N=1,NP
   10 XS1(N)=XS1(2*N-1)/(DT*NP)
      DO 950 N=1,NP
  950 XS(M,N)=XS1(N)
c     IF(IBUG .EQ. 1) CALL SEPLOT(L,NP,X,XS1,SCALE,ID(J))
   28 CONTINUE
C       CONVF CONVOLVES IN THE SOURCE USING A SIMPLE DELAY-LAG SUM.
      CALL CONVF(SCALE,L,I,DT,NP,1)
      IF (IBUG .EQ. 1) L=1
C        TTLAG LAGS EACH SOURCE THE APPROPRIATE TIME
      CALL TTLAG(J,I,DT,NP,SN,SE)
C
C        RECEV COMPUTES THE RECIEVER FUNCTION,TAKES CARE OF THE 1/R
C        DEPENDENCE AND MULTIPLIES IN THE FAULT MOMENT AND 1/4*PI*RHO
C        SCALING TO MICRONS.
C
      CALL RECEV(J,I,NP,LOS)
      DO 3007 M=1,NP
 3007 XS3(M)=XS3(M)+PP(M)
C
C     PHANTOM SUBFAULTS WHICH WERE CREATED TO HANDLE LAYERING ARE
C     SUMMED AND THUS ELIMINATED AT THIS POINT.  REAL SUBFAULT RESULTS
C     ARE PLOTTED AND OUTPUT AT THIS POINT.
C
      IF(JEY1(NS,2,I).LT.0) GO TO 9001
      IF(ISAVEH .EQ. 1) WRITE(7,132) NP,SCALE,ID(J)
      IF(ISAVEH .EQ. 1) WRITE(7,131) (XS3(KP),KP=1,NP)
C
C     WRITING TO BINARY OUTPUT FILE (CADBIN) FOR EACH REAL SUBFAULT.
C
      IF(KBIN.NE.1) GO TO 4005
      SMAX=0.
      DO 4006 M=1,NP
 4006 SMAX=AMAX1(XS3(M),-XS3(M),SMAX)
      PICAM=SMAX/100.
      DO 4007 M=1,NP
      XSAMP=ABS(XS3(M))
 4007 IF(XSAMP.GE.PICAM) GO TO 4008
 4008 CONTINUE
      TSTART=M*DT
      IF(TSTART.LT.TFIRST) TFIRST=TSTART
      MPOIN=NP
      DELTM=DT
 4010 FORMAT(1X,'WRITING BINARY FILE (CADBIN), NP=',I5,'  DT=',F10.5,'  TST
     +TSTART=',F10.5)
      WRITE(12) MPOIN,DELTM,TZERO
      M=2*NP
C
C     THE FOLLOWING CORRECTION IS NOT NECESSARY FOR MOMENT E20
C     AND HAS BEEN OMITTED ....................... APR 30 1993
C     TO GET MOMENT E20, SIMPLY MAKE INPUT MOMENT = 1.e-6
C
C      DO 7999 I45=1,NP
C 7999 XS4(I45)=XS3(I45)/1.E6
C      WRITE(12) (XS4(I45),I45=1,NP)
C
      WRITE(12) (XS3(I45),I45=1,NP)
 4005 CONTINUE
 131  FORMAT(10E12.4)
 132  FORMAT(I5,F10.5,A4)
C
C     PLOT FIRST AND LAST REAL SUBFAULTS.  IF FIRST 2 SUBFAULTS 
C     ARE NOT PHANTOMS, MORE THAN TWO WILL BE PLOTTED.
C
C     IF(NS .EQ. 1 .OR. NS .EQ. 2) CALL SEPLOT(L,NP,X,XS3,SCALE,ID(J))
C     IF(NS .EQ. NSU) CALL SEPLOT(L,NP,X,XS3,SCALE,ID(J))
      DO 40 M=1,NP
   40 XS2(I,M)=XS3(M)+XS2(I,M)
      DO 9002 M=1,NP
 9002 XS3(M)=0.
 9001 CONTINUE
C     BOTTOM OF SUBFAULT LOOP INCLUDING PHANTOMS. DO 3000 NS=1,NSU     
 3000 CONTINUE
C     BOTTOM OF SOURCE LOOP (IE. MULTIPLE FAULTS). DO 21 I=1,NSORCE 
   21 CONTINUE
      WRITE(3,4013) ID(J),TFIRST
      WRITE(13,4014) ID(J),TFIRST
 4014 FORMAT(1X,A4,F10.5)
 4013 FORMAT(1X,'THE EARLIEST ARRIVAL AT',A4,' COMES ',F10.5,' SECONDS AFTE
     +FTER THE BEGINNING OF THE RECORD')
      IF(ITIMEH .EQ. 1) GO TO 20
C     ADDING ALL THE SOURCES
      DO 41 M=1,NP
      PP(M)=0.0
      DO 41 I=1,NSORCE
      PP(M)=PP(M)+XS2(I,M)
   41 CONTINUE
      IF (IPRNT .EQ. 0) GO TO 47
      WRITE(3,112) ID(J)
  112 FORMAT(1X,'TOTAL RESPONSE, WITH INSTRUMENT, FOR STATION',A4)
      WRITE(3,110) (PP(I),I=1,200)
c  47 CALL SEPLOT(L,NP,X,PP,SCALE,ID(J))
 47   continue
C     BOTTOM OF STATION LOOP. DO 20 J=1,NSTAT 
   20 CONTINUE
      CLOSE(9)
      GO TO 77
   76 CLOSE(2)
      WRITE(6,612)
  612 FORMAT(1X, 9HGOOD BYE  )
c     WRITE(6,613)
c 613 FORMAT(1X, 72HYOU'LL FIND PRINT OUTPUT IN FILE 'OUTPUT' AND PLOT OUTP
c    2UTPUT IN FILE 'PLOT'      )
      CLOSE(3)
c     CALL PLOT(17.0,0.0,999)
      IF(ISAVEH .EQ. 1) CLOSE(7)
c     CLOSE(8)
      CLOSE(9)
      CLOSE(13)
      IF (KBIN.EQ.1) CLOSE(12)
      STOP
      END
      SUBROUTINE DISWHT(JSTA,ISRC,MODE,PC,LOS,HS1)
      INCLUDE 'ARSZCAD.DAT'
C  DISWHIT - FIRST MOTIONS FOR ALL DISLOCATION SOURCES IMBEDED IN A LAYERED
C        MEDIUM 6/15/74
C     USES FIRST MOTION APPROX FOR DISLOCATIONS AS USED BY LANGSTON
C     CALCULATES LAYERED MEDIUM RESPONSE FOR P,SV,SH SOURCES
C     NORMALIZATION CONSTANTS FOR THE POTENTIALS ARE ALL SET TO 1.0
C        ALSO, NO FACTORS FOR THE SPATIAL DERIVATIVES ARE INCLUDED
C     HS=DEPTH OF THE SOURCE IN THE MEDIUM
C     NRAY=5,P WAVE; =3,S WAVE
C     NCOUNT(I)=DEGENERACY OF A PARTICULAR RAY
C     COMMON/ANS/ CONTAINS RAY ARRIVAL TIMES (TO) AND AMPLITUDES (AM)
C     NTYPE =+5, UP GOING P, =-5, DOWN-GOING P, =+3, UP-GOING S, =-3, DOWN GOING
      COMMON/ANS/PO(1000),TO(1000),AM(1000),LFINAL,NTYPE(MRAY)
      COMMON/BUG/IBUG
      COMMON/IPR/IPRNT
      COMMON/FAUL1/DIP(MSOR),RAKE(MSOR),STRK(MSOR),FMNT(MSOR),
     + TLAG(MSOR),XC(MSOR),YC(MSOR),HS(MSOR),LIS(MSOR)
      COMMON/STUFF/C(MLAY),S(MLAY),D(MLAY),TH(MLAY),RCSQ(MLAY),
     + RSSQ(MLAY),DPTH(MLAY)
      COMMON/ORST/C1(MLAY),S1(MLAY),D1(MLAY)
      COMMON/RAYS/NA(MRAY,MLEG),NRAY(MRAY,MLEG),NDR(MRAY)
     +,NCOUNT(MRAY),LOVE
      COMMON/TRAVEL/LP(MLAY),LS(MLAY),JO
      REAL*8 RCSQ,RSSQ,C,S,D,TH
      LOVE=0
      IF(MODE.EQ.3) LOVE=2
C
C        READING IN MODEL AND RAYS
C
      IF((ISRC.GT.1).OR.(JSTA.GT.1)) GO TO 38
      DO 36 I=1,JO
      RCSQ(I)=1.0/(C(I)*C(I))
      RSSQ(I)=1.0/(S(I)*S(I))
      C1(I)=SNGL(C(I))
      S1(I)=SNGL(S(I))
      D1(I)=SNGL(D(I))
   36 CONTINUE
   38 CONTINUE
      CALL RAYGUN(LOS,JO,MODE,JM)
      LFINAL=1
      DO 77 I=1,JM
      IF(IPRNT .EQ. 1) WRITE(3,20) HS1,PC,I,JSTA,ISRC
   77 CALL TRAV(HS1,PC,I,JSTA,ISRC)
 20   FORMAT(1X,'HS1=',E12.4,' PC=',E12.4,' I=',I5,' JSTA=',I5,
     +' ISRC=',I5)
      LFINAL=LFINAL-1
  310 FORMAT(1X,'LFINAL=',I5)
      WRITE(3,201) ISRC,JSTA
  201 FORMAT(1X,'CRUSTAL RESPONSE FOR SOURCE',I5,1X,'AT STATION',I5)
      IF(IPRNT.EQ.1)WRITE(3,200)(J,TO(J),AM(J),NTYPE(J),J=1,LFINAL)
  200 FORMAT(I3,2E18.5,I5)
  100 FORMAT(2I10)
  101 FORMAT(8E10.3)
      RETURN
      END
      SUBROUTINE TRANM(P,V1,S1,D1,V2,S2,D2,TPP,TPS,TSP,TSS)
      INCLUDE 'ARSZCAD.DAT'
      COMMON/RAYS/NA(MRAY,MLEG),NRAY(MRAY,MLEG),NDR(MRAY),
     +NCOUNT(MRAY),LOVE
      REAL K1,K2,K3,K4,D1,D2
      RHO1=D1
      RHO2=D2
      K4=RHO2*S2**2/(RHO1*S1**2)
      B1=.5/(1-K4)
      B2=.5*K4/(K4-1)
      K1=B1/S1**2
      K2=B2/S2**2
      K3=K1+K2
      E1=CR(P,V1)
      E2=CR(P,V2)
      E2P=CR(P,S2)
      E1P=CR(P,S1)
       IF (LOVE.GT.0) GO TO 10
      C1=(P**2)*(K3-P**2)**2
      C2=P**2*E1*E1P*E2P
      C3=(E1*E1P)*(K2-P**2)**2
      C4=E2P*(K1-P*P)**2
      C5=K1*K2*E1*E2P
      C6=K1*K2*E1P
      AP=C1+C3-C5
      BP=C2+C4-C6
      BS=AP+E2*BP
      T=2.*K1*E1*(E2P*(K1-P**2)-E1P*(K2-P**2))
      TPP=T/BS
      T=2.*K1*P*E1*(E1P*E2-(K3-P**2))
      TPS=T/BS
      TS=2.*K1*P*E1P*((K3-P**2)-E1*E2P)
      TSP=TS/BS
      TS=-2.*K1*E1P*(E1*(K2-P**2)-E2*(K1-P*P))
      TSS=TS/BS
       RETURN
 10    R1=D1*S1**2
       R2=D2*S2**2
       TSS=(2.*R1*E1P)/ (R1*E1P+R2*E2P)
       RETURN
        END
       SUBROUTINE REFFT(P,V1,S1,D1,V2,S2,D2,RPP,RPS,RSP,RSS)
      INCLUDE 'ARSZCAD.DAT'
      COMMON/RAYS/NA(MRAY,MLEG),NRAY(MRAY,MLEG),NDR(MRAY),
     +NCOUNT(MRAY),LOVE
           REAL K1,K2,K3,K4
      K4=S2**2*D2/(S1**2*D1)
      B1=.5/(1-K4)
      B2=.5*K4/(K4-1)
      K1=B1/S1**2
      K2=B2/S2**2
      K3=K1+K2
      E1=CR(P,V1)
      E2=CR(P,V2)
      E1P=CR(P,S1)
      E2P=CR(P,S2)
       IF (LOVE.GT.0) GO TO 10
      C1=(P**2)*(K3-P**2)**2
      C2=P**2*E1*E1P*E2P
      C3=(E1*E1P)*(K2-P**2)**2
      C4=E2P*(K1-P*P)**2
      C5=K1*K2*E1*E2P
      C6=K1*K2*E1P
      AP=C1+C3-C5
      BP=C2+C4-C6
      A=-C1+C3-C5
      B=-C2+C4-C6
      BT=AP+BP*E2
      RPP=(A-B*E2)/BT
      APS=2.*P*E1 *(K2-P*P)*(K3-P*P)
      BPS=2.*P*E1*(K1-P*P)*E2P
      RPS=(APS-BPS*E2)/BT
      A=-C1 +C3 +C5
      B=-C2 +C4 +C6
       RSS=(A-B*E2)/BT
      ASP=2.*P*E1P*(K2-P*P)*(K3-P*P)
      BSP=2.*P*E1P*(K1-P*P)*E2P
      RSP=-(ASP-BSP*E2)/BT
       RETURN
 10    R1=D1*S1**2
       R2=D2*S2**2
       RSS=(R1*E1P-R2*E2P) / (R1*E1P+R2*E2P)
       RETURN
      END
      SUBROUTINE CONVF(SCALE,L,IS,DT,NP,LINE)
      INCLUDE 'ARSZCAD.DAT'
C     M=1, DOWN-GOING P, NTYPE=-5
C     M=2, UP-GOING P, NTYPE=+5
C     M=3, DOWN-GOING S, NTYPE=-3
C     M=4, UP-GOING S, NTYPE=+3
      COMMON/ANS/PO(1000),TO(1000),AM(1000),LFINAL,NTYPE(MRAY)
      COMMON/BUG/IBUG
      COMMON/STIM/XS(4,4096)
      COMMON/SCONV/PP(4096),NCOMP,MODE
      DIMENSION PT(4096),X(4096),PPT(4096)
      DO 50 K=1,4
      AMP=XS(K,1)
      DO 51 I=1,NP
      IF (XS(K,I).EQ.0.) GO TO 51
      XS(K,I)=XS(K,I)-AMP
 51   CONTINUE
 50   CONTINUE
      IF (IBUG .EQ. 0) GO TO 30
      WRITE(3,600)  IS,DT,NP,LFINAL
  600 FORMAT( 3X, 10HCONVF, IS= I5, F10.4,2I5)
      WRITE(3,601) (TO(I),AM(I),NTYPE(I),I=1,LFINAL)
  601 FORMAT( 5X,2F10.6,I5)
      DO 901 I=1,NP
      X(I)=DT*(I-1)
  901 PT(I)=XS(IS,I)
c      CALL SEPLOT(L,NP,X,PT,SCALE,4H XS )
  950 FORMAT( 3X, 10F11.5)
   30 CONTINUE
      DO 10 I=1,NP
      PT(I)=0.
   10 PP(I)=0.
      DO 20 J=1,LFINAL
      IF (LINE .EQ. 0) GO TO 17
      IF (NTYPE(J) .EQ. -5) GO TO 1
      IF (NTYPE(J) .EQ. +5) GO TO 2
      IF (NTYPE(J) .EQ. -3) GO TO 3
      IM=4
      GO TO 16
    1 IM=1
      GO TO 16
    2 IM=2
      GO TO 16
    3 IM=3
      GO TO 16
   17 IM=IS
   16 DO 15 I=1,NP
   15 PT(I)=XS(IM,I)*AM(J)
      NLAG=IFIX(TO(J)/DT)+1
      IF(IBUG .EQ. 1)WRITE(3,602) J,NTYPE(J),IM,NLAG,NP,TO(J),AM(J),DT
  602 FORMAT(2X,5I5,3E11.4)
      IF(NLAG.GT.NP) GO TO 20
      DO 35 I=1,NP
  35  PPT(I)=0.  
      DO 25 I=NLAG,NP
      PPT(I)=-PT(I-NLAG+1)*1000
   25 PP(I)=PP(I)+PT(I-NLAG+1)
      IF (IBUG .EQ. 0) GO TO 20
c     CALL SEPLOT(L,NP,X,PPT,SCALE,4HCONV)
   20 CONTINUE
      RETURN
      END
      SUBROUTINE TRAV(HS,PC,IR,JSTA,ISRC)
      INCLUDE 'ARSZCAD.DAT'
C     IR - INDEX OF RAY BEING CONSIDERED, GOES FROM 1 TO JM
C     NDR(I) - NUMBER OPF SEGMENTS IN I-TH RAY.
C     NA(RAY,SEGMENT) - DEFINES RAY PATH.
C     NDR(IR) = ND - NUMBER OF SEGMENTS IN RAY IR.
C     NRAY(RAY,SEGMENT) - DEFINES RAY TYPE (P OR S).
      COMMON/ANS/PO(1000),TO(1000),AM(1000),L,NTYPE(MRAY)
      COMMON/BUG/IBUG
      COMMON/IPR/IPRNT
      COMMON/RAYS/NA(MRAY,MLEG),NRAY(MRAY,MLEG),NDR(MRAY),
     +NCOUNT(MRAY),LOVE
      COMMON/STUFF/C(MLAY),S(MLAY),D(MLAY),TH(MLAY),RCSQ(MLAY),
     + RSSQ(MLAY),DPTH(MLAY)
      COMMON/TRAVEL/LP(MLAY),LS(MLAY),LL
      DIMENSION CN(5)
      REAL*8 RCSQ,RSSQ,C,S,D,TH,RSQ
C     FCON FINDS THE FAULT ORIENTATION CONSTANTS
C     NCOUNT(I)=NUMBER OF RAYS WITH THE SAME RESPONSE
C     NEND IS THE NUMBER OF LAYERS TRAVERSED -1.
C     NRAY CODE: P=5,S=3
C     GC IS PRODUCT OF ALL THE TRANSMISSION AND REFLECTION COEFF.
C     TESTING NA AND NRAY FOR LP AND LS INFORMATION.
C
      NEND=NDR(IR)-1
      ND=NDR(IR)
      DO 1 J=1,LL
      LP(J)=0
    1 LS(J)=0
      DO 5 J=1,ND
      NCIP = NA(IR,J)
      IF (NRAY(IR,J) .EQ. 5) LP(NCIP)=LP(NCIP) +1
      IF (NRAY(IR,J) .EQ. 3) LS(NCIP)=LS(NCIP) +1
    5 CONTINUE
C
C        DETERMINING WHICH DIRECTION THE RAY TRAVELS
C                 (UP OR DOWN)
C        NUP=1, RAY GOING UP; =-1, RAY GOING DOWN.
C        LIS=LAYER SOURCE IS IN
C
      LIS=NA(IR,1)
      NL=0
      DO 20 J=1,ND
   20 IF(NA(IR,J).EQ.LIS) NL=NL+1
      NUP=(-1)**NL
      NTYPE(IR)=NUP*NRAY(IR,1)
      IF(IPRNT .EQ. 1) WRITE(3,400) LIS,NUP,NRAY(IR,1),NTYPE(IR)
  400 FORMAT(1X,'LIS=',I5,7H   NUP= I3,8H   NRAY= I3,5X,'NTYPE=',I5)
C
C
C        NOW FINDING THE POSITION OF THE SOURCE IN THE LIS LAYER
C
      LIS1=LIS-1
      THTOT=0.0
      DO 21 I=1,LIS1
   21 THTOT=TH(I)+THTOT
      HSL=HS-THTOT
      IF(IPRNT .EQ. 1) WRITE(3,401) HSL
  401 FORMAT(1X,'HSL=',F10.3)
      NX=1
      DO 17 NM=1,ND
   17 NX=MAX0(NX,NA(IR,NM))
      LMAX=NX
C
C
  30  FORMAT(1X,'LIS=',I5,' RCSQ(LIS)=',E15.5,' PC=',E15.5,' RSSQ(LIS)=',
     +E15.5)
      EA=(RCSQ(LIS)-PC*PC)**0.5
      EB=(RSSQ(LIS)-PC*PC)**0.5
      SR=1.0
      RR=1.0
      MR=NRAY(IR,1)
      EA1=EA
      EB1=EB
      NR=NRAY(IR,ND)
      IF(ND.EQ.1) GO TO 24
      GC=1.0
      DO 10 I=1,NEND
      GCT=GENCOF(I,PC,NUP,IR)
      GC=GC*GCT
   10 CONTINUE
C        THIS SECTION CORRECTS AMPLITUDES FOR A SHALLOW SOURCE
       RT=1.0
      IF((MR.EQ.3).AND.(NR.EQ.5)) RT=EA1/EB
      IF((MR.EQ.5).AND.(NR.EQ.3)) RT=EB1/EA
      GC1=GC
      GC=GC*RT
      IF(IPRNT .EQ. 1) WRITE(3,100) GC1,GC,RT
  100 FORMAT(1X,'GC1=',E13.6,4X,'GC=',E13.6,4X,'RT=',E13.6)
C
      GO TO 25
   24 GC=1.0
   25 CONTINUE
C
C        FINDING THE TIME LAG (FAR-FIELD) ASSOCIATED WITH THE RAY
C
      IF(NUP.LT.0) GO TO 22
C        UP
      H=TH(LIS)-HSL
      GO TO 23
C        DOWN
   22 H=HSL
   23 CONTINUE
      DET=0.0
      DO 35 J=1,LL
  31  FORMAT(1X,'J=',I5,' RCSQ(J)=',E15.5,' PC=',E15.5,' RSSQ(J)=',
     +E15.5)
      DET=DET+LP(J)*TH(J)*DSQRT(RCSQ(J)-PC*PC)
      DET=DET+LS(J)*TH(J)*DSQRT(RSSQ(J)-PC*PC)
   35 CONTINUE
C        ADJUSTING TIMES FOR SOURCE DEPTH
      IF(NRAY(IR,1).EQ.5) RSQ=RCSQ(LIS)
      IF(NRAY(IR,1).EQ.3) RSQ=RSSQ(LIS)
  32  FORMAT(1X,'RSQ=',E15.5,' PC=',E15.5)
      DET=DET-H*DSQRT(RSQ-PC*PC)
C
      CALL FCON(JSTA,ISRC,CN,IR)
      IF(LOVE.EQ.2) GO TO 26
C
C        P AND SV POTENTIALS FOR DISLOCATIONS
C
C
C        THE FOLLOWING SECTION FINDS THE SOURCE RESPONSE TO THE RAY
C        PARAMETER USED.
C
C
C        SS CASE
C
      SRP=-(PC*PC)
      SRS=-(PC*EB)
C        DOWN-GOING AND/OR UP-GOING P WAVES
      IF(MR.EQ.5) SR1=SRP
C        DOWN-GOING SV
      IF((NUP.EQ.-1).AND.(MR.EQ.3)) SR1=SRS
C        UP-GOING SV
      IF((NUP.EQ.+1).AND.(MR.EQ.3)) SR1=-SRS
C
C        DS CASE
C
      SRP=2.0*PC*EA
      SRS=-(PC*PC-EB*EB)
C        DOWN-GOING P
      IF((NUP.EQ.-1).AND.(MR.EQ.5)) SR2=SRP
C        UP-GOING P
      IF((NUP.EQ.+1).AND.(MR.EQ.5)) SR2=-SRP
C        DOWN-GOING AND UP-GOING SV
      IF(MR.EQ.3) SR2=SRS
C
C        45 DS CASE
C
      SRP=-(2.0*EA*EA-PC*PC)
      SRS=3.0*PC*EB
C        DOWN-GOING AND UP-GOING P
      IF(MR.EQ.5) SR3=SRP
C        DOWN-GOING SV
      IF((NUP.EQ.-1).AND.(MR.EQ.3)) SR3=SRS
C        UP-GOING SV
      IF((NUP.EQ.+1).AND.(MR.EQ.3)) SR3=-SRS
      SR=SR1*CN(1)+SR2*CN(2)+SR3*CN(3)
      GO TO 27
   26 CONTINUE
C
C        SH DISLOCATION POTENTIALS
C
C
C        SS CASE
C
C        DOWN-GOING AND UP-GOING SH
      SR1=RSSQ(LIS)
C
C        DS CASE
C
      SRS=-RSSQ(LIS)*EB/PC
C        DOWN-GOING SH
      IF(NUP.EQ.-1) SR2=SRS
C        UP-GOING SH
      IF(NUP.EQ.+1) SR2=-SRS
      SR=SR1*CN(4)+SR2*CN(5)
   27 CONTINUE
C        RR CONTAINED EA OR EB BEFORE TO TAKE CARE OF THE SCALING
C        FOR THE DERIVATIVE WITH RESPECT TO Z.  IT IS DELEDED HERE.
      AM(L)=SR*RR*GC*NCOUNT(IR)
      TO(L)=DET
      IF(IPRNT .EQ. 0) GO TO 40
      WRITE(3,41) GC,SR,RR,EA,EB,DET
      WRITE(3,42) NCOUNT(IR),IR,AM(L),L,PC
  41  FORMAT(1X,'GC=',E12.4,' SR=',E12.4,' RR=',E12.4,' EA=',E12.4,
     +' EB=',E12.4,' DET=',E12.4)
  42  FORMAT(1X,'NCOUNT(IR)=',I5,' IR=',I5,' AM(L)=',E12.4,' L=',
     +I5,' PC=',E12.4)
  40  CONTINUE
      L=L+1
      RETURN
      END
      FUNCTION GENCOF(I,P,NUP,IR)
      INCLUDE 'ARSZCAD.DAT'
      COMMON/RAYS/NA(MRAY,MLEG),NRAY(MRAY,MLEG),NDR(MRAY),
     +NCOUNT(MRAY),LOVE
      COMMON/TRAVEL/LP(MLAY),LS(MLAY),LL
      COMMON/ORST/C(MLAY),S(MLAY),D(MLAY)
      COMMON/IPR/IPRNT
C     NDR(I)= NUMBER OF LEGS IN EITHER MODE
C     LL IS NUMBER OF LAYERS
C     I IS THE INDEX BEFORE INTERACTION
C     (I+1) IS THE INDEX AFTER INTERACTION
C     NUP=1, RAY GOING UP; =-1,RAY GOING DOWN
      Q=P
      M=NA(IR,I+1)
      K=NA(IR,I)
      MR=NRAY(IR,I+1)
      KR=NRAY(IR,I)
      IF(M.EQ.K) GO TO 14
C
C        TRANSMISSION BUSINESS
C
      CALL TRANM(Q,C(K),S(K),D(K),C(M),S(M),D(M),TPP,TPS,TSP,TSS)
      IF(M.GT.K) GO TO 11
      TPS=-TPS
      TSP=-TSP
   11 CONTINUE
      IF(KR.EQ.MR) GO TO 12
      IF(KR.EQ.5) GENCOF=TPS
      IF(KR.EQ.3) GENCOF=TSP
      GO TO 20
   12 IF(KR.EQ.3) GENCOF=TSS
      IF(KR.EQ.5) GENCOF=TPP
      GO TO 20
C
C        REFLECTION BUSINESS
C
   14 CONTINUE
C        TESTING FOR THE REFLECTION NUMBER
      IJ=0
      DO 40 J=1,I
   40 IF(NA(IR,J).EQ.NA(IR,J+1)) IJ=IJ+1
      NFIX=(-1)**IJ
      K=NA(IR,I)
      IF(NUP) 41,41,42
   41 IF(NFIX.LT.0) GO TO 43
C        IJ=EVEN NUMBER AND SOURCE RAY IS DOWN-GOING
      M=K-1
      GO TO 50
   43 CONTINUE
C        IJ=ODD NUMBER AND SOURCE RAY IS DOWN-GOING
      M=K+1
      GO TO 50
   42 IF(NFIX.LT.0) GO TO 44
C        IJ=EVEN NUMBER AND SOURCE RAY IS UP-GOING
      M=K+1
      GO TO 50
   44 CONTINUE
C        IJ=ODD NUMBER AND SOURCE RAY IS UP GOING
      M=K-1
   50 CONTINUE
      CALL REFFT(Q,C(K),S(K),D(K),C(M),S(M),D(M),RPP,RPS,RSP,RSS)
      IF(M.GT.K) GO TO 21
      RPS=-RPS
      RSP=-RSP
   21 CONTINUE
C
      IF(KR.EQ.MR) GO TO 22
      IF(KR.EQ.5) GENCOF=RPS
      IF(KR.EQ.3) GENCOF=RSP
      GO TO 20
   22 IF(KR.EQ.3) GENCOF=RSS
      IF(KR.EQ.5) GENCOF=RPP
   20 CONTINUE
      IF (IPRNT .EQ. 0 ) RETURN
      WRITE(3,112) C(K),S(K),D(K),C(M),S(M),D(M)
      WRITE(3,110) TPP,TPS,TSP,TSS
      WRITE(3,111) RPP,RPS,RSP,RSS
 112  FORMAT(1X,18X,'STUFF(K) AND (M)',/(6E12.4))
 111  FORMAT(1X,15X,'RPP',15X,'RPS',15X,'RSP',15X,'RSS',/(8E12.4))
 110  FORMAT(1X,15X,'TPP',15X,'TPS',15X,'TSP',15X,'TSS',/(8E12.4))
      RETURN
      END
      SUBROUTINE FILTER(X,Y,M,NT)
      DIMENSION X(1),Y(1)
      JJ=(2*M)+1
      T=FLOAT(JJ)
      N=M+1
      NN=NT-N
      NM=NN+1
      IFLAG=0
 4    IFLAG=IFLAG+1
      DO 2 I=1,N
 2    Y(I)=0.
      DO 10 I=N,NN
      K=I+M+1
      L=I-M
 10   Y(I+1)=Y(I)+(1.0/T)*(X(K)-X(L))
      DO 12 I=NM,NT
 12   Y(I)=0.
      IF(IFLAG .EQ. 2) GO TO 16
      DO 15 I=1,NT
 15   X(I)=Y(I)
      GO TO 4
 16   CONTINUE
      RETURN
      END
      SUBROUTINE CONVLV(LX,XX,LY,YY,CC)
      DIMENSION YY(1),XX(1),CC(1)
      LC=LX+LY-1
      IB=LX+1
      DO 10 I=IB,LC
  10  CC(I)=0.
      IX=LX
      DO 30 I=1,LX
      X=XX(IX)
      CC(IX)=0.
      DO 20 J=1,LY
      K=IX+J
      CC(K-1)=CC(K-1)+X*YY(J)
  20  CONTINUE
  30  IX=IX-1
      RETURN
      END
       SUBROUTINE CONVS(TS1,TS2,CON,LG2,DT)
       COMMON/FIXUP/IIDT
       DIMENSION TS1(1),TS2(1),CON(1)
       NCP=2**LG2
       NP=2*NCP
       CALL COOLB(LG2,TS1,-1.)
       CALL COOLB(LG2,TS2,-1.)
       DO 1 J=1,NP,2
       CON(J)=TS1(J)*TS2(J)-TS1(J+1)*TS2(J+1)
 1     CON(J+1) = TS1(J+1)*TS2(J)+TS1(J)*TS2(J+1)
       DF=1./(DT*NCP)
       A=0.
       B=0.
       C=0.
       DO 3 J=1,NCP,2
       AAA=TS1(J)**2+TS1(J+1)**2
       BBB=TS2(J)**2+TS2(J+1)**2
       CCC=CON(J)**2+CON(J+1)**2
       AMP=SQRT(AAA)*DT
       BMP=SQRT(BBB)*DT
       CMP=SQRT(CCC)*DT*DT
       IF (AMP.GT.A) F1=DF*FLOAT((J-1)/2)
       IF (BMP.GT.B) F2=DF*FLOAT((J-1)/2)
       IF (CMP.GT.C) F3=DF*FLOAT((J-1)/2)
       A=AMAX1(A,AMP)
       C=AMAX1(C,CMP)
 3     B=AMAX1(B,BMP)
C      WRITE(3,1111) A,F1
C      WRITE(3,1113) B,F2
C      WRITE(3,1115) C,F3
 1111  FORMAT(' MAX TS1 VALUE IS ',E10.3,' AND OCCURS AT',E10.3,' CPS')
 1113  FORMAT(' MAX TS2 VALUE IS ',E10.3,' AND OCCURS AT',E10.3,' CPS')
 1115  FORMAT(' MAX CON VALUE IS ',E10.3,' AND OCCURS AT',E10.3,' CPS')
       CALL COOLB(LG2,CON,1.)
       CALL COOLB(LG2,TS1,1.)
       CALL COOLB(LG2,TS2,1.)
       SCL=FLOAT(NCP)/DT
       SCAL=FLOAT(NCP)
       DO 2 J=1,NP
       CON(J)=CON(J)/SCL
       TS1(J)=TS1(J)/SCAL
       TS2(J)=TS2(J)/SCAL
       IF (J.LE.NCP) CON(2*J)=0.
 2     IF (J.GT.NCP) CON(J)=0.
       RETURN
       END
      SUBROUTINE COOLB(NN,DETA,SIGNI)
C     SCALING THE OUTPUT OF COOLB.
C     THE SPECTRUM OF A TIME DOMAIN SIGNAL COMPUTED BY COOLB (-1 CASE) CAN BE
C     TERMED THE "SPECTRA".  TO SCALE THIS "SPECTRA" TO THE SPECTRAL DENSITY,
C     THE RESULT OF AN ANALYTICAL COMPUTATION OF THE FOURIER TRANSFORM OF A FUNC
C     TIME INTERVAL, DT.  IN GOING FROM THE FREQUENCY DOMAIN TO THE TIME DOMAIN
C     (+1 CASE OF COOLB), THE OUTPUT MUST BE DIVIDED BY THE NUMBER OF POINTS,
C     N, IF THE TRANSFORM IS PERFORMED ON THE "SPECTRA" OR MUST BE DIVIDED BY
C     N*DT IF THE TRANSFORM IS PERFORMED ON THE SPECTRAL DENSITY.  THIS ACHIEVES
       DIMENSION DETA(1)
      N=2**(NN+1)
      J=1
      DO 5 I=1,N,2
      IF(I-J)1,2,2
    1 TEMPR=DETA(J)
      TEMPI=DETA(J+1)
      DETA(J)=DETA(I)
      DETA(J+1)=DETA(I+1)
      DETA(I)=TEMPR
      DETA(I+1)=TEMPI
    2 M=N/2
    3 IF(J-M)5,5,4
    4 J=J-M
      M=M/2
      IF(M-2)5,3,3
    5 J=J+M
      MMAX=2
    6 IF(MMAX-N)7,10,10
    7 ISTEP=2*MMAX
      THETA=SIGNI*6.28318531/FLOAT(MMAX)
      SINTH=SIN(THETA/2.)
      WSTPR=-2.0  *SINTH*SINTH
      WSTPI= SIN(THETA)
      WR=1.
      WI=0.
      DO 9 M=1,MMAX,2
      DO 8 I=M,N,ISTEP
      J=I+MMAX
      TEMPR=WR*DETA(J)-WI*DETA(J+1)
      TEMPI=WR*DETA(J+1)+WI*DETA(J)
      DETA(J)=DETA(I)-TEMPR
      DETA(J+1)=DETA(I+1)-TEMPI
      DETA(I)=DETA(I)+TEMPR
    8 DETA(I+1)=DETA(I+1)+TEMPI
      TEMPR=WR
      WR=WR*WSTPR-WI*WSTPI+WR
    9 WI=WI*WSTPR+TEMPR*WSTPI+WI
      MMAX=ISTEP
      GO TO 6
   10 RETURN
      END
      SUBROUTINE FCON(JSTA,ISRC,C,IR)
      INCLUDE 'ARSZCAD.DAT'
      DIMENSION C(5)
      COMMON/FAUL1/DIP(MSOR),RAKE(MSOR),STRK(MSOR),FMNT(MSOR),
     + TLAG(MSOR),XC(MSOR),YC(MSOR),HS(MSOR),LIS(MSOR)
      COMMON/STAT/DEL(NSTN),AZ(NSTN),P(NSTN),CRE(NSTN),SRE(NSTN)
C    COORDINATE SYSTEMS USED SAME AS FOR DISSYN2.  X1 AXIS IS NORTH,
C        STRK MEASURED CLOCKWISE FROM IT.
      IF(IR.GT.1) RETURN
      PI2=6.283185/360.
      D=DIP(ISRC)*PI2
      R=RAKE(ISRC)*PI2
      IF (DIP(ISRC).GT.90.) R=-R
      T=(AZ(JSTA)-STRK(ISRC))*PI2
      C(1)=SIN(2.*T)*COS(R)*SIN(D)+COS(2.*T)*SIN(R)*COS(D)*SIN(D)
      C(2)=   COS(T)*COS(R)*COS(D)-SIN(T)*SIN(R)*COS(2.*D)
      C(3)=SIN(R)*COS(D)*SIN(D)
      C(4)=COS(2.*T)*COS(R)*SIN(D)-SIN(2.*T)*SIN(R)*COS(D)*SIN(D)
      C(5)=-SIN(T)*COS(R)*COS(D)-COS(T)*SIN(R)*COS(2.*D)
C
C  IF THE DIP>90,  THEN FOR RAKE=0 TO BE LEFT LATERAL,
C  AND FOR RAKE=+ TO BE A TRUE THRUST FAULT, THEN WE MUST CHANGE
C  THE POLARITY OF THE RAKE ANGLE.
C
      IF(D.GE.0.) GO TO 1
      DO 2 II=1,5
    2 C(II)=-C(II)
    1 CONTINUE
C     WRITE(3,100) JSTA,ISRC
  100 FORMAT(1X,'FAULT ANGLE PARAMETERS-FROM FCON-FOR STATION',I5,2X,'SO
     2URCE',I5)
C     WRITE(3,101) (C(I),I=1,5)
  101 FORMAT(1X,'C(1)=',F10.3,2X,'C(2)=',F10.3,2X,'C(3)=',F10.3,2X,'C(4)
     2=',F10.3,2X,'C(5)=',F10.3)
      RETURN
      END
      SUBROUTINE FTTQ(NT,DT,RQ,FQW,IATTEN,TAUBM,TAULM,TAU)
C     FUTTERMAN'S Q OPERATOR MODIFIED.  CONTAINS NONE OF THE PHASE
C     SHIFTS AND MADE TO USE THE RATIO T/Q.
C     NT=EXPONENT OF 2 (2**NT IS NUMBER OF POINTS)
C     DT=TIME SEPARATION IN THE TIME DOMAIN
C     RQ=RATIO T/Q
C     THIS VERSION OF FTTQ HAS BEEN CHECKED AND CORRECTED ON OCT. 19, 1978.
C
C     IF IATTEN IS EQUAL TO 0, A CONSTANT T STAR MODEL IS USED.
C
C     IF IATTEN IS EQUAL TO 1, PROGRAM USES MINSTER ATTENUATION OPERATOR.
C     MINSTER(1978)G.J.R. ASTR. SOC.,V52,507,EQUATION(2.2).
C
C     IF IATTEN IS EQUAL TO 2, PROGRAM CONSTRUCTS THE FRQUENCY DEPENDENT
C     T STAR OPERATOR OF CHOY AND CORMIER(1986)J.G.R.,V91,7326-7342,
C     EQUATION(6) FOR A SURFACE SOURCE.
C
      DIMENSION FQW(1)
      COMPLEX ARRAY(1025)
C     NUMBER OF POINTS
      ND=2**NT
C     FUNDEMENTAL FREQUENCY
      FDF = 1.0/(ND*DT)
C     SAMPLING FREQUENCY
      W0=6.283185*FDF
      FQW(1)=1.0
      FQW(2)=0.0
      NF=ND/2
      IF(IATTEN .EQ. 0) GO TO 20
      IF(IATTEN .EQ. 1) THEN
      CALL MNSTRQ(NT,DT,RQ,TAUBM,TAULM,TAU,ARRAY)
      FQW(1)=REAL(ARRAY(1))
      FQW(2)=-AIMAG(ARRAY(1))
      DO 21 I=1,NF
      FQW(2*I+1)=REAL(ARRAY(I+1))
      FQW(2*I+2)=-AIMAG(ARRAY(I+1))
      NC=ND-I
      FQW(NC*2+1)=FQW(2*I+1)
      FQW(NC*2+2)=-FQW(2*I+2)
  21  CONTINUE
      GO TO 40
      END IF 
C
C     THE REAL PART OF FQW IS CONTAINED IN THE ODD NUMBERED LOCATIONS
C     AND THE IMAGINARY PART IS IN THE EVEN LOCATIONS.
C
C     FOLDING FREQUENCY POINT
  20  NF=ND/2
      DO 15 I=1,NF
      CK=W0*I*0.5*RQ
      IF(CK .GE. 60.) THEN
      EP=0.
      GO TO 30
      END IF
      EP=EXP(-W0*I*0.5*RQ)
  30  A=W0*I*RQ*0.31830989*ALOG(W0*I)
C     B IS AN ARBITRARY PHASE SHIFT.
      B= W0*I*(2.0)
      CR=COS(A)*COS(B)+SIN(A)*SIN(B)
      SI=SIN(B)*COS(A)-SIN(A)*COS(B)
      FQW(2*I+1)=EP*CR
      FQW(2*I+2)=EP*SI
      NC=ND-I
      FQW(NC*2+1)    =FQW(2*I+1)
      FQW(NC*2+2)    =-FQW(2*I+2)
   15 CONTINUE
   40 FQW(ND+2)=0.0
C     MAKING CORRECTION FOR CHANGE IN DEFN'S FOR FOURIER TRANSFORMS.
      DO 16 I=1,ND
   16 FQW(2*I)=-FQW(2*I)
C
C     FREQ. DOMAIN Q-OPERATOR IS CORRECTLY SCALED.
      IF(IATTEN .EQ. 0) WRITE(3,120) ND,DT,RQ
      IF(IATTEN .EQ. 1) WRITE(3,121) RQ,TAUBM,TAULM,TAU
  121 FORMAT(1X,'MINSTER ATTENUATION OPERATOR WITH RQ= ',F10.3,
     +' TAUBM= ',F10.3,' TAULM= ',F10.4,' TAU= ',F10.1)
  120 FORMAT(1X,'PARTIAL Q OPERATOR (FREQUENCY DOMAIN) FOR # POINTS= ',I
     110,1X,'DT= ',F10.3,1X,'T/Q RATIO= ',F10.3)
   10 RETURN
      END
      SUBROUTINE MNSTRQ(NT,DT,TQ,TAUBM,TAULM,TU,ARRAY)
C
C     STANDARD LINEAR SOLID Q OPERATOR, COMPATIBLE WITH PREVIOUS
C     FUTTERMAN Q OPERATOR SUBROUTINE FORMAT.
C     NT...  LOG2 # OF TIME POINTS
C     DT...  TIME SEPARATION
C     TQ...  T STAR
C     ARRAY..FREQUENCY DOMAIN Q OPERATOR
C     QM...  TRAVEL TIME DIVIDED BY T STAR
C     TU...  TRAVEL TIME OF RAY
C     TAUBM..TAU BIG M
C     TAULM..TAU LITTLE M
C     SEE MINSTER(1978)G.J.R. ASTR. SOC.,V52,479-524,AND
C         BURGER(1987)BSSA,V77,1274.
C         
      COMPLEX ARRAY(1),CQM,CTU,CTBM,CTLM,I,W,CDF,C1,C2,A,ZERO,TSTART
C     DEFAULT VALUE
      TSTART=CMPLX(1.,0.)
      QM=TU/TQ
      NP=2**NT
      NP1=NP/2+1
      DF=1./DT/FLOAT(NP)
      PI=3.1415926
      WZERO=2.*PI*DF
      I=CMPLX(0.,1.)
      ZERO=CMPLX(0.,0.)
      CDT=CMPLX(DT,0.)
      C1=CMPLX(1.,0.)
      C2=CMPLX(2.,0.)
      CDF=CMPLX(DF,0.)
      CPI=CMPLX(PI,0.)
      CQM=CMPLX(QM,0.)
      CTU=CMPLX(TU,0.)
      CTBM=CMPLX(1./TAUBM,0.)
      CTLM=CMPLX(1./TAULM,0.)
      DO 1 J=1,NP1
      W=CMPLX(WZERO*FLOAT(J-1),0.)
      A=I*W*CTU*(C1-C1/CSQRT(C1+CLOG((I*W+CTBM)/(I*W+CTLM))*C2/CPI/CQM))
      IF(174.673+CABS(A)) 10,11,11
  10  ARRAY(J)=ZERO
      GO TO 1
  11  ARRAY(J)=CEXP(A)*CEXP(-W*I*TSTART)
   1  CONTINUE
      RETURN
      END  
      SUBROUTINE INTERP(N,X,Y,NP,XF,YF,I)
C     LINEAR INTERPOLATION PROGRAM
C     N - NUMBER OF POINTS IN ARRAYS X AND Y.
C     X - UNEQUAL ABSCISSA VALUES.
C     Y - UNEQUAL INTERVAL DATA.
C     NP - NUMBER OF POINTS DESIRED.
C     XF - EQUAL INTERVAL ABSCISSA.
C     YF - EQUAL INTERVAL DATA.
      DIMENSION X(1),Y(1),XF(1),YF(1)
      J=1
      I=1
   25 CONTINUE
      IF(XF(I).GT.X(J)) GO TO 30
      YF(I)=0.0
      IF(I.GE.NP) GO TO 20
      I=I+1
      GO TO 25
   30 CONTINUE
   15 CONTINUE
      IF(XF(I).GT.X(J)) GO TO 10
      SLP=(Y(J)-Y(J-1))/(X(J)-X(J-1))
      B=-SLP*X(J)+Y(J)
      YF(I)=SLP*XF(I)+B
      IF(I.GE.NP) GO TO 20
      I=I+1
      GO TO 15
   10 CONTINUE
      IF(J.GE.N) GO TO 20
      J=J+1
      GO TO 15
   20 CONTINUE
      I=I-1
      RETURN
      END
      SUBROUTINE RECEV(JSTA,ISRC,NPTS,LOS)
      INCLUDE 'ARSZCAD.DAT'
C     RI - GEOMETRICAL SPREADING FACTOR.
C     DIS - DISTANCE IN DEGREES.
      COMMON/SCONV/PP(4096),NCOMP,MODE
      COMMON/STAT/DEL(NSTN),AZ(NSTN),P(NSTN),CRE(NSTN),SRE(NSTN)
      COMMON/RINV/RI(16),DIS(16)
      COMMON/ORST/C(MLAY),S(MLAY),D(MLAY)
      COMMON/FAUL1/DIP(MSOR),RAKE(MSOR),STRK(MSOR),FMNT(MSOR),
     + TLAG(MSOR),XC(MSOR),YC(MSOR),HS(MSOR),LIS(MSOR)
C        CALCULATING THE APPROPRIATE RECEIVER FUNCTION
      PC=P(JSTA)
      CP=CRE(JSTA)
      SP=SRE(JSTA)
      EA=CR(PC,CP)
      EB=CR(PC,SP)
      RP=(EB*EB-PC*PC)**2+4.*PC*PC*EA*EB
      RPB=RP*SP*SP
C        VERTICAL P WAVES
      IF((NCOMP.EQ.1).AND.(MODE.EQ.1)) SR=2.*EA*(EB*EB-PC*PC)
C        RADIAL P WAVES
      IF((NCOMP.EQ.2).AND.(MODE.EQ.1)) SR=-4.*EA*EB*PC
C        VERTICAL SV WAVES
      IF((NCOMP.EQ.1).AND.(MODE.EQ.2)) SR=4.*PC*EA*EB
C        RADIAL SV WAVES
      IF((NCOMP.EQ.2).AND.(MODE.EQ.2)) SR=2.*EB*(EB*EB-PC*PC)
C        NOTE THAT SIGN CHANGE IS FOR VERTICAL COMP SO THAT UP IS +VE.
      IF(NCOMP.EQ.1) SR=-SR
      REC=SR/RPB
      IF(MODE.EQ.3) REC=2.*PC
C     WRITE(3,100) REC
  100 FORMAT(1X,'RECEIVER FUNCTION=',F10.3)
C        INTERPOLATING TO FIND THE CORRECT 1/R FACTOR
      IF (DEL(JSTA).LT.DIS(1)) THEN
      R1=RI(1)
      GO TO 200
      ENDIF
      IF (DEL(JSTA).GT.DIS(16)) THEN
      R1=RI(16)
      GO TO 200
      ENDIF
      DO 10 I=1,15
      J=I
      IF((DEL(JSTA).GE.DIS(I)).AND.(DEL(JSTA).LE.DIS(I+1))) GO TO 16
   10 CONTINUE
   16 DN=DEL(JSTA)-DIS(J)
      RATIO=DN/(DIS(J+1)-DIS(J))
      R1=RATIO*(RI(J+1)-RI(J))+RI(J)
C     WRITE(3,101) R1
  101 FORMAT(1X,'1/R FACTOR=',1PE10.3)
C        FINAL SCALING CONSTANT FOR MICRONS SCALING
 200  T2=1.0E-16
      CONS=T2*REC*R1*FMNT(ISRC)/(4.*3.14159*D(LOS))
C     WRITE(3,102) CONS,ISRC
  102 FORMAT(1X,'CONS=',1PE10.3,2X,'FOR SOURCE',I5)
      DO 20 I=1,NPTS
   20 PP(I)=PP(I)*CONS
      RETURN
      END
      FUNCTION CR(P,V)
      CR=SQRT(1./(V*V)-P*P)
      RETURN
      END
      SUBROUTINE SCON(F,DT,NPTS,NPL,DT1,DT2,DT3)
C     THIS VERSION OF SCON HAS BEEN CHECKED AND CORRECTED ON OCT. 19, 1978.
      DIMENSION F(1)
      REAL*4 M1,M3
      N=2*NPTS
C        CONSTRUCTING F'S.  ZERO FREQ AMP IS SET TO ZERO.
C        SAMPLING FREQUENCY
      W0=6.283185/(NPTS*DT)
C        FOLDING FREQUENCY POINT
      NF=NPTS/2
      DO 10 I=1,N
   10 F(I)=0.0
      D1=DT1
      D2=DT1+DT2
      D3=D2+DT3
      M1=1.0/D1
      M3=1.0/DT3
C     A IS THE AREA UNDER THE TRAPEZOID.
      A=1.0/(0.5*DT1+DT2+0.5*DT3)
      F(1)=1.0/A
      F(2)=0.
      DO 15 I=1,NF
      W=W0*I
      W1=W*W
      C1=COS(W*D1)
      C2=COS(W*D2)
      C3=COS(W*D3)
      S1=SIN(W*D1)
      S2=SIN(W*D2)
      S3=SIN(W*D3)
      I1=2*I+1
      I2=2*I+2
      F(I1)=-(M1*(1.0-C1)+M3*(C3-C2))/W1
      F(I2)=-(M1*S1+M3*(-S3+S2))/W1
      IN1=(NPTS-I)*2+1
      IN2=(NPTS-I)*2+2
      F(IN1)=F(I1)
   15 F(IN2)=-F(I2)
C     THIS STEP IS INSERTED TO CONFORM TO THE THEOREM PROVED IN THE FT NOTES.
      F(NPTS+2)=0.0
      DO 16 I=1,N
   16 F(I)=A*F(I)
C     FREQ. DOMAIN TIME FUNCTION IS CORRECTLY SCALED.
      RETURN
      END
      SUBROUTINE TTLAG(JS,IS,DT,NP,SN,SE)
      INCLUDE 'ARSZCAD.DAT'
      COMMON/FAUL1/DIP(MSOR),RAKE(MSOR),STRK(MSOR),FMNT(MSOR),
     + TLAG(MSOR),XC(MSOR),YC(MSOR),HS(MSOR),LIS(MSOR)
      COMMON/STAT/DEL(NSTN),AZ(NSTN),P(NSTN),CRE(NSTN),SRE(NSTN)
      COMMON/SCONV/PP(4096),NCOMP,MODE
      DIMENSION PT(4096)
C    THIS SUBROUTINE LAGS THE RESPONSE IN TIME DUE TO RUPTURE (TLAG) AND
C        SPATIAL DISRIBUTION OF THE POINT SOURCES. THE LAG DUE TO DEPTH
C        HAS BEEN TAKEN CARE OF WHEN DISWHIT WAS CALLED.
C     JS - INDEX OF STATION.
C     IS - INDEX OF SOURCE.
      A=AZ(JS)*6.283185/360.
      D=(XC(IS)+SN)*COS(A) + (YC(IS)+SE)*SIN(A)
      D=-D*P(JS)
      DLAG=D+TLAG(IS)
C     WRITE(3,100) DLAG,IS,JS
  100 FORMAT(1X,'DLAG=',F10.3,2X,'FOR SOURCE',I5,2X,'STATION',I5)
C     WRITE(3,101) XC(IS),YC(IS),SN,SE
  101 FORMAT('XC=',F8.4,'  YC=',F8.4,'  SN=',F8.4,'  SE=',F8.4)
      DO 5 I=1,NP
    5 PT(I)=0.0
      NLAG=IFIX(DLAG/DT)
      IF(NLAG.GE.NP) GO TO 10
      IF(NLAG.EQ.0) RETURN
      IF(NLAG.LT.0) GO TO 18
      NP1=NP-NLAG
      DO 15 I=1,NP1
   15 PT(I+NLAG)=PP(I)
      DO 16 I=1,NP
   16 PP(I)=PT(I)
      RETURN
   10 CONTINUE
      DO 17 I=1,NP
   17 PP(I)=0.0
      RETURN
   18 CONTINUE
      NP1=NP+NLAG
      DO 19 I=1,NP1
   19 PT(I)=PP(I-NLAG)
      DO 20 I=1,NP
   20 PP(I)=PT(I)
      RETURN
      END
      SUBROUTINE VECTOR(P,V,AZ,STRK,DIP,FRAKE,ANG,ANG1,M,LINE)
      COMMON/BUG/IBUG
      RAD=0.017453
C     COMPUTE TAKE-OFF ANGLE.
C     MEASURE DIP OF FAULT FROM DOWNWARD VERTICAL.
       DIP=90.0-DIP
      AIH=P*V
      AI=ASIN(AIH)
      IF ((M .EQ. 2) .OR. (M .EQ. 4)) AI=3.1415926-AI
      SAIH=SIN(AI)
      CAIH=COS(AI)
      AI=AI/RAD
      IF (IBUG .EQ. 1)  WRITE(3,600) P,V,AZ,AIH,AI,SAIH,CAIH
      AZ=AZ*RAD
      X=COS(AZ)*SAIH
      Y=SIN(AZ)*SAIH
      Z=CAIH
      IF (LINE .EQ. 1) GO TO 14
C     COMPUTE POLE TO FAULT PLANE.
      A=STRK+270.0
      D=90.0-DIP
      GO TO 13
C     COMPUTE AZIMUTH AND DIP OF FAULT PROPAGATION VECTOR.
   14 IF (FRAKE .EQ. 0.) GO TO 10
      IF (FRAKE .EQ. 270.0) GO TO 11
      IF (FRAKE .EQ. 180.0) GO TO 12
      A =STRK+270.0
      D=180.0-DIP
      GO TO 13
   10 A=STRK
      D=90.0
      GO TO 13
   11 A=STRK+90.0
      D=DIP
      GO TO 13
   12 A=STRK+180.0
      D=90.0
   13 IF (A .GT. 360.0) A=A-360.0
      IF (IBUG .EQ. 1) WRITE(3,600) STRK,DIP,FRAKE,A,D
  600 FORMAT(3X,7HVECTOR ,9F11.5)
      A=A*RAD
      D=D*RAD
      X1=COS(A)*SIN(D)
      Y1=SIN(A)*SIN(D)
      Z1=COS(D)
      DIST=(X-X1)**2 + (Y-Y1)**2 + (Z-Z1)**2
      ANG=(2.0-DIST)/2.0
      ANG1=ACOS(ANG)
      ANG1=ANG1/RAD
      AZ=AZ/RAD
       DIP=90.0-DIP
      IF (IBUG .EQ. 1) WRITE(3,600) ANG,ANG1,DIST,X,X1,Y,Y1,Z,Z1
      RETURN
      END
      SUBROUTINE HASKEL(F,DT,NP,C,L,VR,T,ANG)
C     C - WAVE VELOCITY IN SOURCE REGION.
C     L - FAULT LENGTH.
C     VR - RUPTURE VELOCITY.
C     T - TIME CONSTANT OF THE DISLOCATION MODEL.
C     ANG - ANGLE BETWEEN RAY TAKE-OFF ANGLE AND FAULT PRPAGATION VECTOR.
      COMMON/BUG/IBUG
      DIMENSION F(1)
      REAL L
      RAD=0.017453
C     ANG=ANG*RAD
      TAU=(L/C)*((C/VR)-ANG)
      NP2=NP*2
C     SAMPLING FREQUENCY.
      WS=6.283185/(NP*DT)
      IF (IBUG .EQ. 1) WRITE(3,601) NP,DT,C,L,VR,T,ANG,TAU,WS
  601 FORMAT( 3X,I5,8F11.5)
C     FOLDING FREQUENCY POINT.
      NF=NP/2
      DO 10 I=1,NP2
   10 F(I)=0.0
      F(1)=1.0
      F(2)=0.0
      DO 15 I=1,NF
      W=WS*I
      I1=2*I+1
      I2=2*I+2
      Q=W*TAU/2.0
      CQ=COS(Q)
      SQ=SIN(Q)
      R=SQ/Q
      DENOM=1.0+(T*W)**2
C     A REPRESENTS AN ARBITRARY TIME SHIFT IN SECONDS.
      A=5.0
      A=W*A
      F(I1) = R*COS(A)*((-SQ*W*T /DENOM)+CQ/DENOM)
      F(I2) = -R*SIN(A)*((CQ*T*W/DENOM)-SQ/DENOM)
      IN1=(NP-I)*2+1
      IN2=(NP-I)*2+2
      F(IN1)=F(I1)
   15 F(IN2)=-F(I2)
      F(NP+2)=0.0
      IF (IBUG .EQ. 1) WRITE(3,600) (F(I),I=1,200)
  600 FORMAT( 3X, 10E12.5 )
      RETURN
      END
      SUBROUTINE JILL (IS,DIP,HYPD,XL,LEND,JO)
      INCLUDE 'ARSZCAD.DAT'
C  JILL READS IN THE INFORMATION FOR A FINITE FAULT.
      COMMON/RAT/FAR(MTX,MTY,4),WEIGHT(MTX,MTY,MSOR),TMLAG(MTX,MTY)
      COMMON/TAIL/NX(MSOR),NY(MSOR),NDX(MSOR),NDY(MSOR),IH(MSOR),
     + JH(MSOR),RV(MSOR),DSX(MSOR),DSY(MSOR),DTD(MSOR)
      COMMON/SUBF/NSUB(MSOR),IBX1(MSUB,MSOR),IEX1(MSUB,MSOR),
     +BY1(MSUB,MSOR),EY1(MSUB,MSOR),JBY1(MSUB,2,MSOR),
     +JEY1(MSUB,2,MSOR),MSUB1(MSOR),IB(MSUB,MSOR),IE(MSUB,MSOR)
      COMMON/STUFF/C(MLAY),S(MLAY),D(MLAY),TH(MLAY),RCSQ(MLAY),
     + RSSQ(MLAY),DPTH(MLAY)
      DIMENSION BWEIGH(MX,MY)
      REAL LEND
      REAL*8 RCSQ,RSSQ,C,S,D,TH
C       DATA BWEIGH/300*1./
      WRITE(6,1100)
 1100 FORMAT(1X,'WHAT IS THE FAULT LENGTH?')
      READ(5,*)XL
      WRITE(6,102)
  102 FORMAT (1X,'ENTER THE NUMBER OF WEIGHTS TO BE ENTERED ALONG STRIKE.')
     2')
      READ(5,*) NX(IS)
      WRITE(6,1101)
 1101 FORMAT(1X,'HOW MANY INTERMEDIATE POINTS ALONG STRIKE?') 
      READ(5,*) NDX(IS)
      WRITE(6,1102)
 1102 FORMAT(1X,'WHAT ARE THE TOP AND BOTTOM DEPTHS OF THE FAULT?')          
      READ(5,*)DTD(IS),BD
      WRITE(6,1103)
 1103 FORMAT(1X,'HOW MANY POINT SOURCES DOWN THE DIP?')
      READ(5,*) NY(IS)
      WRITE(6,1104)
 1104 FORMAT(1X,'HOW MANY INTERMEDIATE POINT SOURCES DOWN THE DIP?')
      READ(5,*) NDY(IS)
      NYY=NY(IS)
      NXX =NX(IS)
      DO 343 J=1,NYY
      READ(9,344)(BWEIGH(I,J),I=1,NXX)
  343 CONTINUE
  344 FORMAT (30F3.0)
      WRITE(6,1105)
 1105 FORMAT(1X,'WHAT IS THE HYPOCENTRAL DEPTH?')
      READ(5,*) HYPD
      WRITE(6,1106)
 1106 FORMAT(1X,'WHAT IS THE DISTANCE ALONG STRIKE OF THE HYPOCENTER?')
      READ(5,*) LEND
      WRITE(6,108)
  108 FORMAT (1X,'ENTER THE RUPTURE VELOCITY')
      READ (5,*) RV(IS)
      WRITE(6,1107)
 1107 FORMAT(1X,'HOW MANY SUBFAULTS?')
      READ(5,*)NSUB(IS)
      JSUB=NSUB(IS)
      DO 1979 NSU=1,JSUB
      WRITE(6,1108)
 1108 FORMAT(1X,'THE SUBFAULT RUNS FROM WHERE TO WHERE ALONG THE STRIKE;
     +  GIVE THE FINE GRID SPACING')
      READ(5,*) IBX1(NSU,IS),IEX1(NSU,IS)
      WRITE(6,1109)
 1109 FORMAT(1X,'THE SUBFAULT RUNS BETWEEN WHICH TWO DEPTHS?')
      READ(5,*) BY1(NSU,IS),EY1(NSU,IS)
      IF(IBX1(NSU,IS).LT.1) IBX1(NSU,IS)=1
      IF(BY1(NSU,IS).LT.0.001) BY1(NSU,IS)=0.001
      NTX = (1+NDX(IS))*(NX(IS)-1) + 1
      IF(IEX1(NSU,IS).GT.NTX) IEX1(NSU,IS)=NTX
      IF(BY1(NSU,IS).LT.DTD(IS)) BY1(NSU,IS)=DTD(IS)
      IF(EY1(NSU,IS).GT.BD) EY1(NSU,IS)=BD
 1979 CONTINUE
      NTX = (1+NDX(IS))*(NX(IS)-1) + 1
      NTY = (1+NDY(IS))*(NY(IS)-1) + 1
      NDDX = NDX(IS)+1
      NDDY = NDY(IS) +1
      NTTY = NTY-1
      NTTX = NTX-1
      DO 3002 J=1,NYY
      DO 3003 I=1,NXX
      NNX = 1 + (I-1)*(NDX(IS)+1)
      NNY = 1 + (J-1)*(NDY(IS)+1)
      WEIGHT (NNX,NNY,IS) = BWEIGH (I,J)
 3003 CONTINUE
      WRITE(3,3004) (BWEIGH(I,J),I=1,NXX)
 3004 FORMAT (1X,20F5.2)
 3002 CONTINUE
      DO 29 I=1,NXX
      DO 30 J=1,NTTY,NDDY
      J2 = 0
   31 J2 = J2+1
      J3 = J+J2
      J4 = J+NDY(IS)+1
      IF (J2.GE.NDDY) GO TO 32
      NNX = 1 + (I-1)*NDDX
      WEIGHT(NNX,J3,IS)=(WEIGHT(NNX,J,IS)*(NDY(IS)+1-J2)+WEIGHT(
     2 NNX,J4,IS)*J2)/ (NDY(IS)+1)
      GO TO 31
   32 CONTINUE
   30 CONTINUE
   29 CONTINUE
C  WILL NOW INTERPOLATE TO FIND WEIGHTS FOR INTERMEDIATE COLUMN.
      DO 35 J=1,NTY
      DO 36 I=1,NTTX,NDDX
      I2 = 0
   37 I2 = I2+1
      I3 = I+I2
      I4 = I+NDX(IS)+1
      IF (I2.EQ.NDDX) GO TO 38
      WEIGHT(I3,J,IS)=(WEIGHT(I,J,IS)*(NDX(IS)+1-I2)+WEIGHT(I4,J,IS)*I2)
     2 /(NDX(IS)+1)
      GO TO 37
   38 CONTINUE
   36 CONTINUE
   35 CONTINUE
      DSX(IS)=XL/(NTX-1)
      YL=(BD-DTD(IS))/SIN(DIP)
      DSY(IS)=YL/(NTY-1)
      IH(IS)=LEND/DSX(IS) + 1.5
      JH(IS)=((HYPD-DTD(IS))/SIN(DIP))/DSY(IS) + 1.5
      CALL MOMENT(IS,DIP,JO)
      WRITE(3,200) IS
  200 FORMAT('         FAULT #',I1)
      WRITE(3,201) XL
  201 FORMAT(1X,'FAULT LENGTH IS ',F6.3,'KM')
      WRITE(3,202) NX(IS)
  202 FORMAT(1X,'NUMBER OF COARSE GRID POINTS ALONG STRIKE =',I2)
      WRITE(3,203) NDX(IS)
  203 FORMAT(1X,'NUMBER OF INTERMEDIATE GRID POINTS ALONG STRIKE=',I2)
      WRITE(3,204) NTX,DSX(IS)
  204 FORMAT(1X,'TOTAL NUMBER GRID POINTS ALONG STRIKE=',I3,' ;DSX=',F
     +6.4)
      WRITE(3,205) DTD(IS),BD
  205 FORMAT(' TOP AND BOTTOM DEPTHS OF FAULT ARE ',F6.3,' AND ',F6.3)
      WRITE(3,206) YL
  206 FORMAT(' FAULT WIDTH IS ',F6.3,'KM')
      WRITE(3,207) NY(IS)
  207 FORMAT(' NUMBER OF COARSE GRID POINTS DOWN DIP IS ',I2)
      WRITE(3,208) NDY(IS)
  208 FORMAT(' NUMBER OF INTERMEDIATE GRID POINTS DOWN DIP IS ',I2)
      WRITE(3,209) NTY,DSY(IS)
  209 FORMAT(' NUMBER OF TOTAL GRID POINTS DOWN DIP =',I3,' ;DSY=',F6.4
     +)
      WRITE(3,210) LEND,HYPD
  210 FORMAT(' HYPOCENTER IS ',F6.3,' ALONG STRIKE AND ',F6.3,
     +' DOWN DIP')
      WRITE(3,211) IH(IS),JH(IS)
  211 FORMAT(' CLOSEST GRID POINT IS ',I3,' ACCROSS BY ',I3,' DOWN')
      WRITE(3,212) RV(IS)
  212 FORMAT(' THE RUPTURE VELOCITY IS ',F6.3,'KM/SEC')
      JSUB=NSUB(IS)
      WRITE(3,213)JSUB
  213 FORMAT(' THERE ARE ',I3,' SUBFAULTS')
      DO 1982 NSU=1,JSUB
      WRITE(3,214)NSU,BY1(NSU,IS),EY1(NSU,IS),IBX1(NSU,IS),IEX1(NSU,IS)
  214 FORMAT(' SUBFAULT NUMBER ',I3,' IS BETWEEN THE DEPTHS OF ',F7.3,
     +' AND ',F7.3,' AND RUNS BETWEEN THE STRIKE INDICES OF ',I3,
     +' AND ',I3)
 1982 CONTINUE
      RETURN
      END
      SUBROUTINE DIANE(DT,STRK,DIP,AZ,P,IS,VP,VS,NSU,LOS,HYPD)
      INCLUDE 'ARSZCAD.DAT'
C  DIANE COMPUTES THE TELESEISMIC TIME FUNTION FOR A FINITE FAULT OF THE
C  TYPE USED IN NORMA (HEATON).  THE FINITE FAULT (OR SUBFAULT) MUST LIE
C  WITHIN A HOMOGENOUS LAYER (LOS).
      COMMON/RAT/FAR(MTX,MTY,4),WEIGHT(MTX,MTY,MSOR),TMLAG(MTX,MTY)
      COMMON/TAIL/NX(MSOR),NY(MSOR),NDX(MSOR),NDY(MSOR),IH(MSOR),
     + JH(MSOR),RV(MSOR),DSX(MSOR),DSY(MSOR),DTD(MSOR)
      COMMON/SUBF/NSUB(MSOR),IBX1(MSUB,MSOR),IEX1(MSUB,MSOR),
     +BY1(MSUB,MSOR),EY1(MSUB,MSOR),JBY1(MSUB,2,MSOR),
     +JEY1(MSUB,2,MSOR),MSUB1(MSOR),IB(MSUB,MSOR),IE(MSUB,MSOR)
      COMMON/TIMEFN/TF(4096,4),XZK(4096)
      COMMON/STUFF/C(MLAY),S(MLAY),D(MLAY),TH(MLAY),RCSQ(MLAY),
     + RSSQ(MLAY),DPTH(MLAY)
       DIMENSION Y(4096),DD(3)
       INTEGER*4 ITP,IHP,JTP,JHP
      DIMENSION GAR(4)
      REAL*8 RCSQ,RSSQ,C,S,D,TH
C  TF(J,I) IS THE TIME FUNCTION FOR THE RAYS P,pP,S,sS
      DO 1145 I=1,4
      DO 1146 J=1,4096
 1146 TF(J,I)=0.
 1145 CONTINUE
C     CALL FIRSTP
      DD(1) = 0
      DD(2) = 0
      DD(3) = 0
C  NTX,NTY ARE TOTAL NUMBER OF GRID POINTS ON THE FINITE FAULT
      NTX = (1+NDX(IS))*(NX(IS)-1) + 1
      NTY = (1+NDY(IS))*(NY(IS)-1) + 1
      NDDX = NDX(IS)+1
      NDDY = NDY(IS) +1
      NTTY = NTY-1
      NTTX = NTX-1
C  IH,JH ARE THE HORIZONTAL AND VERTICAL FINE GRID POINTS FOR THE 
C  HYPOCENTER
C  LOS IS THE LAYER WITH THE VIRTUAL SOURCE IN IT.
C
C     WRITE(6,3469) IH(IS),JH(IS)
C3469 FORMAT(1X,'IH,JH',2I5)
C
C  WILL NOW COMPUTE THE ARRIVAL TIMES OF THE PHASES P,PP,S,SP.
      DO 50 L=1,4
      FAR(1,1,L)=0.
      FAR(NTX,1,L)=FAR(1,1,L) - P*(NTX-1)*DSX(IS)*COS(STRK-AZ)
C  ED IS THE UNIT VECTOR IN THE DOWN-DIP DIRECTION
      ED1 = -SIN(STRK)*COS(DIP)
      ED2 = COS(DIP)*COS(STRK)
      ED3 = SIN(DIP)
C  CV IS THE INTRINSIC VELOCITY AT THE VIRTUAL SOURCE (NOT
C  NECESSARILY THE HYPOCENTER) OF THE RAY OF INTEREST 
C  ALT IS POSITIVE FOR DOWN-GOING AND NEGATIVE FOR UPGOING
      CV = VP
      IF (L.GE.3) CV=VS
      ALT=1
      IF (L.EQ.2) ALT=-1
      IF (L.EQ.4) ALT=-1
C  ES IS THE UNIT VECTOR ALONG THE RAY PATH
      ES1 = COS(AZ)*P*CV
      ES2 = SIN(AZ)*P*CV
      ES3 = ALT*SQRT(1-(P*CV)**2)
C     WRITE(6,87) ES3
C     WRITE(3,88) ES1,ES2,ES3
C  88 FORMAT (1X,'ES1,ES2,ES3',3F12.6)
C  87 FORMAT (F10.5)
C
C  EDES IS THE DOT PRODUCT OF ED AND ES
      EDES = ED1*ES1 + ED2*ES2 + ED3*ES3
C     WRITE(3,897)ED1,ED2,ED3,EDES
C 897 FORMAT (1X,'ED1,ED2,ED3,EDES',4F12.6)
C     WRITE(6,899) P,CV
C 899 FORMAT (1X,'P,C',2F12.6)
      FAR(1,NTY,L) = FAR(1,1,L) - EDES*(NTY-1)*DSY(IS)/CV
      FAR(NTX,NTY,L)=FAR(1,NTY,L) - P*(NTX-1)*DSX(IS)*COS(STRK-AZ)
   89 FORMAT (1X,'FAR 1 TO 4',4F12.6)
      IBX=IB(NSU,IS)
      ISX=IE(NSU,IS)
      JBY=JBY1(NSU,1,IS)
      JSY=JEY1(NSU,1,IS)
      IF(L.EQ.1)WRITE(3,241)JBY,JSY,IBX,ISX
  241 FORMAT(' SUBFAULT HAS DIMENSIONS FROM',I3,'TO',I3,
     + 'DOWN AND FROM',I3,'TO',I3,'ACROSS')
C     WRITE(3,89) FAR(1,1,L),FAR(NTX,1,L),FAR(1,NTY,L),FAR(NTX,NTY,L)
C  COMPUTE THE ARRIVAL TIMES RELATIVE TO THE UPPER LEFT CORNER
C  IF THE FAULT SPANS VELOCITY LAYERS, THEN THE ARRIVAL TIMES FOR THESE 
C  CORNERS MAY NOT BE THE ACTUAL VALUES.  THESE CORNERS ARE USED TO
C  INTERPOLATE TO THE ARRVIVAL TIMES OF ELEMENTS WITHIN THE SUBFAULT.
      DO 51 J=JBY,JSY
      FAR(1,J,L) = FAR(1,1,L) + (FAR(1,NTY,L)-FAR(1,1,L))*(J-1)/(NTY-1)
      FAR(NTX,J,L) = FAR(NTX,1,L) + (FAR(NTX,NTY,L)-FAR(NTX,1,L))*(J-1)
     2 /(NTY-1)
      DO 52 I=IBX,ISX
      FAR(I,J,L) = FAR(1,J,L) + (FAR(NTX,J,L)-FAR(1,J,L))*(I-1)/(NTX-1)
C     IF (L.NE.1) GO TO 90
C     WRITE(3,91) FAR(I,J,L)
C  91 FORMAT (1X,'FAR',F12.6)
   90 CONTINUE
   52 CONTINUE
   51 CONTINUE
   50 CONTINUE
C  WILL NOW COMPUTE THE LAG TIME DUE TO RUPTURE.
C  ITP AND JTP ARE THE LOCATIONS OF THE VIRTUAL POINT SOURCES WHICH
C  REPRESENT THE FINITE FAULT WITHIN A LAYER.
      IHP=IH(IS)
      JHP=JH(IS)
      ITP = IHP
      JTP = JHP
      IF(IHP.LT.1) ITP=1
      IF(IHP.GT.NTX) ITP=NTX
C  DPTH(LOS) IS DEPTH OF LAYER WITH THE SOURCE (NOT NECESSARILY THE HYPOCENTER)
C  DTD IS THE DEPTH OF THE TOP OF THE FAULT
      YT=(DPTH(LOS)-DTD(IS))/(DSY(IS)*SIN(DIP))
      IF(HYPD.GT.DPTH(LOS)) JTP=INT(YT)+1
      YT=(DPTH(LOS-1)-DTD(IS))/(DSY(IS)*SIN(DIP))
      IF(HYPD.LT.DPTH(LOS-1)) JTP=INT(YT)+1
      DO 164 L=1,4
      FAR(1,JTP,L)=FAR(1,1,L)+(FAR(1,NTY,L)-FAR(1,1,L))*(JTP-1)
     +/(NTY-1)
      FAR(NTX,JTP,L)=FAR(NTX,1,L)+(FAR(NTX,NTY,L)-FAR(NTX,1,L))
     +*(JTP-1)/(NTY-1)
      FAR(ITP,JTP,L)=FAR(1,JTP,L)+(FAR(NTX,JTP,L)-FAR(1,JTP,L))*
     +(ITP-1)/(NTX-1)
      GAR(L) = FAR(ITP,JTP,L)
      DO 162 I=IBX,ISX
      DO 163 J=JBY,JSY
  163 FAR(I,J,L) = FAR(I,J,L)-GAR(L)
  162 CONTINUE
  164 CONTINUE
C  IN THIS VERSION THE NEED FOR STTM HAS BEEN ELIMINATED BY THE USE
C  OF THE VARIABLE CRAP AND ALSO THE SUBROUTINES SLAVE AND TTLAG.
C     DO 60 L=1,4
C  60 STTM(L) = FAR(ITP,JTP,L)
      SCALE=0.
C BULL IS A RUPTURE TIME THAT IS SUBTRACTED OUT OF EVERYTHING TO REDUCE
C THE TIME OF THE LEADER.  BULL IS THE SAME FOR ALL SUBFAULTS
      RITP=ITP
      RJTP=JTP
      RIHP=IHP
      RJHP=JHP
C  THE FOLLOWING CODE LOOKS TO BE INCORRECT IF THE HYPOCENTER IS ABOVE 
C  OR BELOW THE LIMITS OF THE FAULT AND HAS BEEN REPLACED OCTOBER 1988
C      CRAP=((ITP-IHP)*DSX(IS))**2+((JTP-JHP)*DSY(IS))**2
C      IF((JTP.GE.1).AND.(JTP.LE.NTX)) CRAP=((ITP-IHP)*DSX(IS))**2
C
      CRAP=((ITP-IHP)*DSX(IS))**2
      IF (JHP.LT.1) CRAP=((ITP-IHP)*DSX(IS))**2+(JHP*DSY(IS))**2
      IF (JHP.GT.NTY) CRAP=((ITP-IHP)*DSX(IS))**2
     &+((JHP-NTY)*DSY(IS))**2       
      BULL = SQRT(CRAP)/RV(IS)
C     WRITE(6,5623) DS(IS),RV(IS)
C5623 FORMAT(1X,'DS,RV',2F12.5)
C     WRITE(6,1387)IHP,JHP,ITP,JTP
C1387 FORMAT (1X,'IHP,JHP,ITP,JTP',4I5)
C     WRITE(6,1206) BULL
C1206 FORMAT(1X,'BULL=',F12.5)
C  WILL NOW COMPUTE THE TIME FOR THE RUPTURE TO MEET A GRID POINT
      DO 54 I=IBX,ISX
      DO 55 J=JBY,JSY
      CRAP=((I-IHP)*DSX(IS))**2+((J-JHP)*DSY(IS))**2
      TMLAG(I,J) = SQRT(CRAP)/RV(IS)
C     WRITE(3,1958)WEIGHT(I,J,IS),SCALE
C1958 FORMAT(1X,'WEIGHT,SCALE',2F12.6)
      DO 56 L=1,4
   56 FAR(I,J,L) = FAR(I,J,L) + TMLAG(I,J) - BULL
   55 CONTINUE
   54 CONTINUE
      DO 754 I=1,NTX
      DO 755 J=1,NTY
  755 SCALE=SCALE+WEIGHT(I,J,IS)
  754 CONTINUE
C  WILL NOW COMPUTE THE TIME FUNCTION.
      WRITE(6,1957) SCALE,DT
 1957 FORMAT(1X,'SCALE=',E12.4,'      DT=',E12.4)
C
C  NTY1 DELETES BOTTOM ROW OF SOURCES ON EACH FAULT SEGMENT SO
C  THAT FAULT SEGMENTS MATCH TOGETHER PROPERLY WITH NO OVERLAP.
C
      NTY1=JSY-1
      NTX1=ISX-1
      IF(ISX.EQ.NTX)NTX1=NTX
      IF(JSY.EQ.NTY)NTY1=NTY
      DO 61 L=1,4
      DO 62 I=IBX,NTX1
      DO 63 J=JBY,NTY1
      K = (FAR(I,J,L))/DT + 20
      TF(K,L) = TF(K,L) + WEIGHT(I,J,IS)/(SCALE*DT)
C     IF (L.NE.1) GO TO 92
C     WRITE(3,5789) I,J,L,K,FAR(I,J,L),TMLAG(I,J),TF(K,L)
C  92 CONTINUE
C5789 FORMAT (1X,'I,J,L,K,FAR,TMLAG,TF',4I5,3F12.6)
   63 CONTINUE
   62 CONTINUE
C     WRITE(3,243) (TF(K,L),K=1,501)
  243 FORMAT (1X,10F8.5)
   61 CONTINUE
      DO 70 L=1,4
      DO 71 K=1,500
   71 Y(K) = TF(K,L)
C     CALL CPLOT (Y,500,500,DD,1.,0.,1)
   70 CONTINUE
C     CALL LASTP
      RETURN
      END
      SUBROUTINE CONTOR(ZGR,NDX,NDY,DX,DY)
      INCLUDE 'ARSZCAD.DAT'
C  THIS SUBROUTINE CREATES FILES CONTOUR(ICON) WHICH ARE IN A FORMAT SUITABLE
C  FOR CONTOURING WITH BERNARD MINSTER'S CONTOUR PROGRAM.  THE PARAMETER ICON
C  STEPS EACH TIME THE PROGRAM IS CALLED.  THIS PROGRAM IS MODIFIED EXTENSIVE
C  LY FROM ONE WRITTEN BY MINSTER AND THUS HAS AN UNUSUAL STYLE.
      COMMON/POINT/ICON
      COMMON/JUNK/NGDRX,NGDRY,XMIN,XMAX,YMIN,YMAX,ZMIN,ZMAX,CLAT,CLON
      DIMENSION ZGR(MTX,MTY),XGR(MTX),YGR(MTY)
      INTEGER*4 LWRT,NGRDX,NGRDY
      character*10 name
      CLAT = 0.
      CLON = 0.
      ICON = ICON + 1
      IF (ICON.LT.10) IC1=0
      IF (ICON.GE.10) IC1=1
      IF (ICON.GE.10) IC2=ICON-10
      IF (ICON.LT.10) IC2=ICON
      IF (ICON.GE.20) IC1=2
      IF (ICON.GE.20) IC2=ICON-20
      write(name,300) ic1,ic2
  300 FORMAT('CNTR',2I1,'.DAT')
      OPEN(UNIT=11,FILE=NAME,STATUS='NEW',
     + ACCESS='SEQUENTIAL',FORM='UNFORMATTED')
      write(3,200) name
  200 FORMAT(' SUBROUTINE CONTOUR IS WRITING FILE TO ',a)
      NGRDX=NDX
      NGRDY=NDY
      DO 1 I=1,NDX
    1 XGR(I) = (I-1)*DX
C  FLIP Y AXIS UPSIDE DOWN SO DOWN DIP IS DOWN AND ALONG STRIKE IS RIGHT.
      DO 2 I=1,NDY
    2 YGR(I) = -(NDY-I)*DY
      XMIN = 0.
      XMAX = XGR(NDX)
      YMIN = YGR(1)
      YMAX = YGR(NDY)
      ZMAX = -1.E10
      ZMIN = 1.E10
      DO 4 I=1,NDX
      DO 5 J=1,NDY
      ZMAX = AMAX1(ZMAX,ZGR(I,J))
      ZMIN = AMIN1(ZMIN,ZGR(I,J))
    5 CONTINUE
    4 CONTINUE
      LWRT = 0
C     CALL WRDSK(11,LWRT,NGRDX,4,ICODE)
C     IF (ICODE.NE.0) GO TO 2300
C     LWRT = LWRT+4
      WRITE(11)NGRDX,NGRDY
C     NWD = NGRDX+NGRDX
C     CALL WRDSK(11,LWRT,XGR(1),NWD,ICODE)
      WRITE(11)(XGR(I),I=1,NGRDX)
C     IF (ICODE.NE.0) GO TO 2300
C     LWRT = LWRT+NWD
C     NWD = NGRDY + NGRDY
C     CALL WRDSK(11,LWRT,YGR(1),NWD,ICODE)
      WRITE(11)(YGR(I),I=1,NGRDY)
C     IF (ICODE.NE.0) GO TO 2300
C     LWRT = LWRT+NWD
C     NWD = NGRDX+NGRDX
      DO 2100 I=1,NGRDY
      II=NGRDY-I+1
C     CALL WRDSK(11,LWRT,ZGR(1,II),NWD,ICODE)
 2100 WRITE(11)(ZGR(J,II),J=1,NGRDX)
C     IF (ICODE.NE.0) GO TO 2300
C2100 LWRT = LWRT + NWD
C     CALL WRDSK(11,LWRT,XMIN,16,ICODE)
      WRITE(11)XMIN,XMAX,YMIN,YMAX,ZMIN,ZMAX,CLAT,CLON
C     IF (ICODE.NE.0) GO TO 2300
      CLOSE (11)
      RETURN
C2300 WRITE(6,2350) ICODE
C     WRITE(3,2350) ICODE
C2350 FORMAT(' ERROR IN WRDSK, ICODE=',I4)
C     CLOSE (11)
C     RETURN
      END
      SUBROUTINE MOMENT(IS,DIPP,JO)
      INCLUDE 'ARSZCAD.DAT'
C  SUBROUTINE MOMENT CHANGES THE WEIGHTS WHICH ARE GIVEN IN TERMS
C  OF RELATIVE DISLOCATION TO ABSOLUTE DISLOCATION AND THEN HAS THESE
C  WEIGHTS CONTOURED.  IT THEN CONVERTS ALL MOMENTS OVER TO RELATIVE
C  MOMENTS FOR USE IN THE REST OF THE PROGRAM.
      COMMON/RAT/FAR(MTX,MTY,4),WEIGHT(MTX,MTY,MSOR),TMLAG(MTX,MTY)
      COMMON/TAIL/NX(MSOR),NY(MSOR),NDX(MSOR),NDY(MSOR),IH(MSOR),
     + JH(MSOR),RV(MSOR),DSX(MSOR),DSY(MSOR),DTD(MSOR)
      COMMON/STUFF/C(MLAY),S(MLAY),D(MLAY),TH(MLAY),RCSQ(MLAY),
     + RSSQ(MLAY),DPTH(MLAY)
      COMMON/FAUL1/DIP(MSOR),RAKE(MSOR),STRK(MSOR),FMNT(MSOR),
     + TLAG(MSOR),XC(MSOR),YC(MSOR),HS(MSOR),LIS(MSOR)
      DIMENSION FACTOR(MTY),WGHT(MTX,MTY)
      REAL*8 RCSQ,RSSQ,C,S,D,TH
      DPTH(1)=0.
      NTX=1+(NX(IS)-1)*(1+NDX(IS))
      NTY=1+(NY(IS)-1)*(1+NDY(IS))
      DO 1 J=2,JO
    1 DPTH(J)=DPTH(J-1)+TH(J)
      SCALE=0.
      DO 2 J=1,NTY
      H=DTD(IS)+(J-1)*DSY(IS)*SIN(DIPP)
      L=0
    3 L=L+1
      IF(H.GT.DPTH(L)) GO TO 3
      FACTOR(J)=D(L)*S(L)*S(L)
C  TURN WEIGHTS FROM RELATIVE SLIP TO RELATIVE MOMENT
      DO 4 I=1,NTX
      WEIGHT(I,J,IS)=WEIGHT(I,J,IS)*FACTOR(J)
    4 SCALE=SCALE+WEIGHT(I,J,IS)
    2 CONTINUE
      AREA=DSX(IS)*DSY(IS)*1.E10
      WRITE(3,*)' AREA AND SCALE:',AREA,SCALE
      DO 5 J=1,NTY
      SLIP=FMNT(IS)/(AREA*SCALE*FACTOR(J)*1.E10)
      DO 6 I=1,NTX
C  TURN WEIGHTS INTO ACTUAL SLIPS IN CM.
      WEIGHT(I,J,IS)=WEIGHT(I,J,IS)*SLIP
    6 WGHT(I,J)=WEIGHT(I,J,IS)
C     WRITE(3,100) (WGHT(I,J),I=1,NTX)
C 100 FORMAT(20(F4.0,1X))
    5 CONTINUE
      WRITE(3,*)' DISLOCATION SCALING FACTOR FOR INPUT MOMENT'
      DO 103 J=1,2
 103  WRITE(3,101) (WGHT(I,J),I=1,2)
 101  FORMAT(1X,'WGHT(I,J)= ',E12.4)
C     CALL CONTOR(WGHT,NTX,NTY,DSX(IS),DSY(IS))
      DO 7 J=1,NTY
      DO 8 I=1,NTX
C  TURN WEIGHTS BACK INTO RELATIVE MOMENTS
    8 WEIGHT(I,J,IS)=WEIGHT(I,J,IS)*FACTOR(J)/FACTOR(NTY)
    7 CONTINUE
      RETURN
      END
      SUBROUTINE SLAVE(IS,HYPD,SDP,LOS,STRK,DIP,SN,SE,FL,XHYP)
      INCLUDE 'ARSZCAD.DAT'
C  SLAVE SETS UP PROPER GEOMETRY FOR EACH SUBFAULT.  ALL DISTANCES ARE
C  MEASURED FROM THE TOP CENTER OF EACH FINITE FAULT.
      COMMON/STUFF/C(MLAY),S(MLAY),D(MLAY),TH(MLAY),RCSQ(MLAY),
     + RSSQ(MLAY),DPTH(MLAY)
      COMMON/TAIL/NX(MSOR),NY(MSOR),NDX(MSOR),NDY(MSOR),IH(MSOR),
     + JH(MSOR),RV(MSOR),DSX(MSOR),DSY(MSOR),DTD(MSOR)
      REAL*8 RCSQ,RSSQ,C,S,D,TH
C FIND LAYER WITH THE SOURCE
      LSOR=0
    1 LSOR=LSOR+1
      IF(DPTH(LSOR).LT.HYPD) GO TO 1
      IF(LOS.EQ.LSOR) SDP=HYPD
      IF(LOS.LT.LSOR) SDP=DPTH(LOS)
      IF(LOS.GT.LSOR) SDP=DPTH(LOS-1)
      H=SDP-DTD(IS)
      XH=XHYP-FL/2.
      YH=H/SIN(DIP)
      D1=SQRT(XH*XH+YH*YH)
      S1=SQRT(D1*D1-H*H)
      BETA=ATAN2(XH,YH)
      GAMA=STRK+1.570796-BETA
      SN=S1*COS(GAMA)
      SE=S1*SIN(GAMA)
      RETURN
      END
      SUBROUTINE SUBFLT(IS,DIP)
      INCLUDE 'ARSZCAD.DAT'
C  SUBFAULT SETS UP THE DIMENSIONS OF SUBFAULTS, ASSUMING THAT VELOCITY
C  CONTRASTS ALSO PRODUCE SUBFAULT BOUNDARIES.
      COMMON/STUFF/C(MLAY),S(MLAY),D(MLAY),TH(MLAY),RCSQ(MLAY),
     + RSSQ(MLAY),DPTH(MLAY)
      COMMON/TAIL/NX(MSOR),NY(MSOR),NDX(MSOR),NDY(MSOR),IH(MSOR),
     + JH(MSOR),RV(MSOR),DSX(MSOR),DSY(MSOR),DTD(MSOR)
      COMMON/SUBF/NSUB(MSOR),IBX1(MSUB,MSOR),IEX1(MSUB,MSOR),
     +BY1(MSUB,MSOR),EY1(MSUB,MSOR),JBY1(MSUB,2,MSOR),
     +JEY1(MSUB,2,MSOR),MSUB1(MSOR),IB(MSUB,MSOR),IE(MSUB,MSOR)
      REAL*8 RCSQ,RSSQ,C,S,D,TH
C  NL IS THE NEW SUBFAULT INDEX.  L IS THE LAYERING INDEX.
C  LIMN IS A FLAG TO DECIDE WHETHER OR NOT A SUBFAULT CONTAINS AN
C  ACTUAL ROW OF SOURCES.
      LIMN=0
      NTY=(NX(IS)-1)*(NDX(IS)+1) + 1
      NL=0
      NSU=NSUB(IS)
      DO 2 N=1,NSU
C  FIND THE LAYER WITH THE TOP OF THE SUBFAULT.
      L=0
    3 L=L+1
      IF((BY1(N,IS).LT.DPTH(L+1)).AND.(BY1(N,IS).GE.DPTH(L))) GO TO 7
      GO TO 3
    7 L=L+1
C  IF LIMN=-1, THEN ELIMINATE THE LAST SUBFAULT SINCE IT CONTAINED NO SOURCES.
      NL=NL+1+LIMN
      Y=(BY1(N,IS)-DTD(IS))/(SIN(DIP)*DSY(IS))
      JBY1(NL,1,IS)=INT(Y)+1
      JBY1(NL,2,IS)=L
      TD=BY1(N,IS)
      IB(NL,IS)=IBX1(N,IS)
      IE(NL,IS)=IEX1(N,IS)
    5 IF(EY1(N,IS).LE.DPTH(L)) GO TO 4
C  IF A LAYER BOUNDARY OCCURS BEFORE BOTTOMOF SUBFAULT, THEN CREATE TWO
C  SUBFAULTS WHICH WILL LATER BE SUMMED IF JEY1(NL,2,IS) IS NEGATIVE.
      Y=(DPTH(L)-DTD(IS))/(SIN(DIP)*DSY(IS))
      JEY1(NL,1,IS)=INT(Y)+1
      JEY1(NL,2,IS)=-L
C  ELIMINATE THIS SUBFAULT IF THERE ARE NO SOURCES WITHIN.
      LIMN=-1
      BD=DPTH(L)
      DO 9 J=1,NTY
      DJ=DTD(IS)+(J-1)*DSY(IS)*SIN(DIP)
    9 IF((DJ.GE.TD).AND.(DJ.LE.BD))LIMN=0
      NL=NL+1+LIMN
C  CREATE TOP TO NEW SUBFAULT.
      L=L+1
      Y=(DPTH(L-1)-DTD(IS))/(SIN(DIP)*DSY(IS))
      JBY1(NL,1,IS)=INT(Y)+1
      JBY1(NL,2,IS)=-L
C  IF THE LAST SUBFAULT WAS ELIMINATED, THEN THIS SUBFAULT BOUNDARY IS
C  NO LONGER VIRTUAL.
      IF(LIMN.EQ.-1) JBY1(NL,2,IS)=L
      TD=DPTH(L-1)
      IB(NL,IS)=IBX1(N,IS)
      IE(NL,IS)=IEX1(N,IS)
      GO TO 5
    4 CONTINUE
C  PUT BOTTOM ON SUBFAULT AND CHECK TO SEE IF ANY SOURCES ARE LOCATED
C  WITHIN THE SUBFAULT.  IF NOT, THEN ELIMINATE THE SUBFAULT.
      LIMN=-1
      BD=EY1(N,IS)
      DO 8 J=1,NTY
      DJ=DTD(IS)+(J-1)*DSY(IS)*SIN(DIP)
    8 IF((DJ.GE.TD).AND.(DJ.LE.BD))LIMN=0
C  IF LAST SUBFAULT WAS ELIMINATED, THEN THE BOUDARY IS NO LONGER VIRTUAL.
      IF(LIMN.EQ.-1) JEY1(NL-1,2,IS)=IABS(JEY1(NL-1,2,IS))
      Y=(EY1(N,IS)-DTD(IS))/(SIN(DIP)*DSY(IS))
      JEY1(NL,1,IS)=INT(Y)+1
      JEY1(NL,2,IS)=L
      IF(JBY1(NL,1,IS).LE.0)JBY1(NL,1,IS)=1
      NTY=(NY(IS)-1)*(NDY(IS)+1) + 1
    2 IF(JEY1(NL,1,IS).GT.NTY) JEY1(NL,1,IS)=NTY
      MSUB1(IS)=NL+LIMN
      RETURN
      END
      SUBROUTINE RAYGUN(LOS,NLAY,MODE,JM)
      INCLUDE 'ARSZCAD.DAT'
C  RAYGUN DECIDES WHICH RAYFILE SHOULD BE READ.  THE FIRST RAY IS NOT
C  IGNORED.  THIS IS DIFFERENT FROM THE RAYGUN IN THREAD.  ALL OF THE
C  RAYFILES SHOULD BE IN A SUBUFD TO THE RUNNING UFD.  THE NAME OF THIS
C  UFD SHOULD BE RAYUFD.  INDIVIDUAL RAY SETS ARE IN FILES NAMED
C  RAY.I.J.K     WHERE  I=1,2,3 FOR P,SV,SH WAVES
C    J=NUMBER OF LAYERS
C    K=LAYER WITH THE SOURCE
      COMMON/RAYS/NA(MRAY,MLEG),NRAY(MRAY,MLEG),NDR(MRAY),
     + NCOUNT(MRAY),LOVE
      COMMON/IPR/IPRNT
      character*40 name
      IF(NLAY.GE.10) GO TO 1
      write(name,1000) mode,nlay,los
 1000 FORMAT('/users/cmendoza/pgms/ff/rays/rx',I1,'x',I1,'x',I1,'.dat')
      GO TO 2
    1 IF(LOS.GE.10) GO TO 3
      write(name,1001) mode,nlay,los
 1001 FORMAT('/users/cmendoza/pgms/ff/rays/rx',I1,'x',I2,'x',I1,'.dat')
      GO TO 2
 3    write(name,1002) mode,nlay,los
 1002 FORMAT('/users/cmendoza/pgms/ff/rays/rx',I1,'x',I2,'x',I2,'.dat')
    2 CONTINUE
      OPEN(UNIT=4,FILE=NAME,STATUS='OLD')
      READ(4,255) JM
  255 FORMAT(I10)
      DO 42 I=1,JM
      READ(4,400)ND,(NA(I,J),J=1,ND)
      IF (IPRNT.EQ.1) WRITE(3,401)ND,(NA(I,J),J=1,ND)
      READ(4,400) NCOUNT(I),(NRAY(I,J),J=1,ND)
      IF (IPRNT.EQ.1) WRITE(3,401) NCOUNT(I),(NRAY(I,J),J=1,ND)
      NDR(I)=ND
   42 CONTINUE
  400 FORMAT(40I2)
  401 FORMAT(1X,40I2)
c 402 FORMAT(' RAYFILE IS ',20A2)
      CLOSE(4)
      RETURN
      END
      SUBROUTINE CONTF(XSS,XS4,XS3,X,FQW,X1,XS1,NP,NP2,NPL,DT,AREA,
     +NSORCE,IBUG,SCALE)
C
C     THIS ROUTINE READS IN AN EXTERNALLY GENERATED TIME FUNCTION
C     INTO CADILLAC. THE FORMAT OF THE TIME FUNCTION FILE MUST BE
C     THE SAME AS THAT GENERATED BY THE PROGRAM KOSTROV. LINEAR
C     INTERPOLATION IS DONE TO PRODUCE A COMMON TIME STEP FOR BOTH
C     THE TIME FUNCTION AND THE PREVIOUSLY CONVOLVED INSTRUMENT
C     RESPONSE AND Q OPERATOR. THE RESAMPLING TIME STEP IS CHOSEN 
C     TO BE THE FINER OF THE TWO TIME STEPS. THE CONVOLUTION IS DONE
C     AND THE RESULT IS RESAMPLED, IF NECESSARY AT THE ORIGINAL DT.
C
      INCLUDE 'ARSZCAD.DAT'
      DIMENSION XS4(1),XS3(1),X(1),FQW(1),X1(1),XS1(1),XSS(MSOR,1)
      CHARACTER*80 DIGTF

C	call opnplt(2,8.,0)
C	call plot(2.,6.5,-3)
      WRITE(6,703)
  703 FORMAT(1X,'ENTER NAME OF FILE WITH DIGITIZED TIME FUNCTION')
      READ(5,704) DIGTF
  704 FORMAT(A)
      OPEN(UNIT=14,FILE=DIGTF,STATUS='OLD')
      READ(14,705) ITOT,DTKOS
      READ(14,706) (XS4(I),I=1,ITOT)
  705 FORMAT(I10,F10.5)
  706 FORMAT(1X,9E12.4)
      CLOSE(14)
      IF(ITOT .LT. NP) THEN
      DO 714 I=ITOT+1,NP
  714 XS4(I)=0.
      END IF
      DO 708 I=1,NP
      X(I)=DT*(I-1)
  708 XS3(I)=DTKOS*(I-1)
C	if (ibug .eq. 1) call draw(xs4,np,dtkos,scale)
      CALL TRAP(XS4,XS3,1,ITOT,X1,KZ)
      AREA=X1(KZ)
      WRITE(6,717) AREA
  717 FORMAT(1X,'AREA UNDER TIME FUNCTION= ',F12.4)
      DIFDT=ABS(DTKOS-DT)
      IF(DIFDT .LT. .0001) GO TO 730 
      IF(DTKOS .LT. DT) THEN
      CALL COOLB(NPL,FQW,+1.0)
      DO 713 I=1,NP
  713 FQW(I)=FQW(2*I-1)/(DT*NP)
      CALL INTERP(NP,X,FQW,NP,XS3,X1,NPNEW)
      IF(NPNEW .GE. NP) GO TO 718
      NPNEW1=NPNEW+1
      DO 719 I=NPNEW1,NP
  719 X1(I)=0.
  718 continue
C 718 IF(IBUG .EQ. 1) CALL DRAW(X1,NP,DTKOS,SCALE)
      DO 715 I=1,NP
      FQW(2*I)=0.
      FQW(2*I-1)=X1(I)
      XS1(2*I)=0.
  715 XS1(2*I-1)=XS4(I)
      CALL COOLB(NPL,FQW,-1.0)
      CALL COOLB(NPL,XS1,-1.0)
      DO 716 I=1,NP2
      FQW(I)=FQW(I)*DTKOS
  716 XS1(I)=XS1(I)*DTKOS
      GO TO 720
      END IF
      IF(DT .LT. DTKOS) THEN
      CALL INTERP(NP,XS3,XS4,NP,X,X1,NPNEW)
      IF(NPNEW .GE. NP) GO TO 709
      NPNEW1=NPNEW+1
      DO 710 I=NPNEW1,NP
  710 X1(I)=0.
  709 continue
C 709 IF(IBUG .EQ. 1) CALL DRAW(X1,NP,DT,SCALE)
      DO 711 I=1,NP
      XS1(2*I)=0.
  711 XS1(2*I-1)=X1(I)
      CALL COOLB(NPL,XS1,-1.0)
      DO 712 I=1,NP2
  712 XS1(I)=XS1(I)*DT
      END IF
      GO TO 720
  730 CONTINUE
      DO 721 I=1,NP
      XS1(2*I)=0.
  721 XS1(2*I-1)=XS4(I)
      CALL COOLB(NPL,XS1,-1.0)
      DO 722 I=1,NP2
  722 XS1(I)=XS1(I)*DT
  720 CONTINUE
      DO 723 J=1,NP
      XR=XS1(2*J-1)
      XI=XS1(2*J)
      YR=FQW(2*J-1)
      YI=FQW(2*J)
      CONR=(XR*YR-XI*YI)/AREA
      CONI=(XI*YR+XR*YI)/AREA
      XS1(2*J-1)=CONR
      XS1(2*J)=CONI
  723 CONTINUE
      IF(DTKOS .LT. DT) THEN
      CALL COOLB(NPL,XS1,+1.0)
      DO 724 I=1,NP
  724 XS1(I)=XS1(2*I-1)/(DTKOS*NP)
      CALL INTERP(NP,XS3,XS1,NP,X,X1,NPNEW)
      IF(NPNEW .GE. NP) GO TO 725
      NPNEW1=NPNEW+1
      DO 726 I=NPNEW1,NP
  726 X1(I)=0.
  725 continue
C 725 IF(IBUG .EQ. 1) CALL DRAW(X1,NP,DT,SCALE)
      DO 727 I=1,NP
      XS1(2*I)=0.
  727 XS1(2*I-1)=X1(I)
      CALL COOLB(NPL,XS1,-1.0)
      DO 728 I=1,NP2
  728 XS1(I)=XS1(I)*DT
      END IF
      DO 729 I=1,NSORCE
      DO 729 J=1,NP
  729 XSS(I,J)=XS1(J)
C	call endplt
      RETURN
      END
      SUBROUTINE TRAP(Y,T,N1,N2,Z,NP)
C     INTEGRATES THE CURVE Y(I) SAMPLED AT TIME POINTS T(I) BETWEEN
C     THE POINTS N1 AND N2.  OUTPUT IS IN ARRAY Z(I) SAMPLED AT THE
C     NP TIME POINTS.
      DIMENSION Y(1),T(1),Z(1)
      J=1
      Z(J)=0.
      M=N1+1
      DO 10 I=M,N2
      J=J+1
      H=ABS(T(I)-T(I-1))
      A=Y(I)-Y(I-1)
      IF(Y(I) .GE. 0.) IY=1
      IF(Y(I) .LT. 0.) IY=0
      IF(Y(I-1) .GE. 0.) IY1=1
      IF(Y(I-1) .LT. 0.) IY1=0
      IF(IY .NE. IY1) GO TO 4
      Q1=ABS(Y(I-1))
      Q2=ABS(Y(I))
      IF(Q2 .LT. Q1) GO TO 5
      AREA=H*Y(I-1)+H*A/2.
      GO TO 9
  5   A=Y(I-1)-Y(I)
      AREA=H*Y(I)+H*A/2.
      GO TO 9
  4   TM=T(I-1)-Y(I-1)*H/A
      H1=ABS(TM-T(I-1))
      H2=ABS(T(I)-TM)
      AREA=(H1*Y(I-1)+H2*Y(I))/2.
  9   Z(J)=Z(J-1)+AREA
 10   CONTINUE
      NP=J
      K=N1
      DO 12 I=1,NP
      T(I)=T(K)-T(N1)
  12  K=K+1
      RETURN
      END
C     SUBROUTINE DRAW(Z,NT,DT,SCALE)
C     DIMENSION Z(1)
C     AMP=0.
C     DO 10 I=1,NT
C 10  IF(ABS(Z(I)) .GT. AMP) AMP=ABS(Z(I))
C     Y=Z(1)/AMP
C     X=0.
C     CALL PLOT(X,Y,3)
C     DELX=DT/(25.4*SCALE)
C     DO 20 I=1,NT
C     Y=Z(I)/AMP
C     X=DELX*(I-1)
C 20  CALL PLOT(X,Y,2)
C     CALL NUMBER(0.,-.15,.1,AMP,0.,'F12.6')
C     CALL PLOT(0.,-1.5,-3)
C     RETURN
C     END

